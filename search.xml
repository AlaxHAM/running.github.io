<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python基础语法</title>
      <link href="/3857016810/"/>
      <url>/3857016810/</url>
      
        <content type="html"><![CDATA[<h2 id="python-基础语法"><a href="#python-基础语法" class="headerlink" title="python 基础语法"></a>python 基础语法</h2><h3 id="Python种类"><a href="#Python种类" class="headerlink" title="Python种类"></a>Python种类</h3><p>​    众做周知，Python 的底层是由 C 实现的，所以常用的也是 Cpython，除此之外还有 Jpython，lronpython 等</p><p>​    Cpython 是官方的版本，在执行时 Cpython 会将 原(py)文件 转换成 字节码(pyc)文件，然后在 python 虚拟机上执行</p><p>​    Jpython 顾名思义就是由 java 实现，执行时会将代码动态编译成 java 字节码，然后在 jvm 上运行</p><p>​    IronPython 由 C# 实现，同样执行会将代码编译成 C# 字节码，然后在 CLR 运行</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>​    常用的七个数据类型：字符串，数字，列表，字典，元组，集合，布尔。其中三个是可变，四个是不可变类型，<strong>字符串，数字，元组，布尔</strong> 是<strong>不可变数据类型 (可哈希)</strong>；<strong>列表，字典，集合</strong> 是<strong>可变数据类型 (不可哈希)</strong>。同时 python 中的 布尔类型 其实继承 int 的</p><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">strip()  <span class="comment"># 移除字符串左右两边的字符，该方法有一个参数，表示指定清除的字符</span></span><br><span class="line">split()  <span class="comment"># 分割，默认会以一个空白符分割字符串，同样可以通过参数指定分割字符，分割后会返回一个 list</span></span><br><span class="line">len(str)    <span class="comment"># 返回字符串的总长度</span></span><br><span class="line">capitalize()   <span class="comment"># 首字母大写</span></span><br><span class="line">count()   <span class="comment"># 统计某一个字符的出现的个数，通过参数指定要统计的字符</span></span><br><span class="line">startswith()   <span class="comment"># 判断字符串是否以某个字符开头，通过参数指定字符，返回 True or False</span></span><br><span class="line">endswith()     <span class="comment"># 同理，判断是否以某个字符结尾</span></span><br><span class="line">find()     <span class="comment"># 查找某一个字符的索引位置，如果返回 -1 则表示搜索的字符不在目标字符串中</span></span><br><span class="line">index（）  <span class="comment"># 与 find 一样，但是使用 index 方法查找一个不存在的字符，会抛出异常 ValueError</span></span><br><span class="line">replace()  <span class="comment"># 替换，两个必传参数，被替换的字符，要替换成的字符，第三个参数是次数，默认是全部替换</span></span><br><span class="line">upper()    <span class="comment"># 字符全部转为大写</span></span><br><span class="line">lower()    <span class="comment"># 字符全部转为小写</span></span><br><span class="line">swapcase()  <span class="comment"># 字符串的大小写字母翻转</span></span><br><span class="line">join()     <span class="comment"># 连接字符，join 内部的参数是一个可迭代对象，可迭代的每一个元素要是 str，并将指定的字符作为分隔符加入到每两个字符的中间，作为新字符串返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断方法</span></span><br><span class="line">isdigit()    <span class="comment"># 判断字符串是否是纯数字组成</span></span><br><span class="line">isalnum()    <span class="comment"># 判断字符串中是否由数字或字母组成</span></span><br><span class="line">isalpha()    <span class="comment"># 判断字符创是否是纯字母组成</span></span><br><span class="line">isupper()    <span class="comment"># 判断所有字符是否都是大写</span></span><br><span class="line">islower()    <span class="comment"># 判断所有字符是否都是小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化方法</span></span><br><span class="line">format()     <span class="comment"># 将字符串的中留空的位置，替换为 format 方法指定的字符串参数，原字符串中留空数要和给定的参数数量一致，否则抛出 IndexError 异常</span></span><br><span class="line"></span><br><span class="line">msg=<span class="string">'name:&#123;&#125;,age:&#123;&#125;'</span></span><br><span class="line">print(msg.format(<span class="string">'ham'</span>,<span class="string">'21'</span>))       <span class="comment"># name:ham,age:21</span></span><br><span class="line">msg=<span class="string">'name:&#123;0&#125;,age:&#123;1&#125;,addr:&#123;0&#125;'</span></span><br><span class="line">print(msg.format(<span class="string">'ham'</span>,<span class="string">'21'</span>))       <span class="comment"># name:ham,age:21,addr:ham</span></span><br><span class="line">msg=<span class="string">'name:&#123;x&#125;,age:&#123;y&#125;'</span></span><br><span class="line">print(msg.format(x=<span class="string">'ham'</span>,y=<span class="string">'21'</span>))   <span class="comment"># name:ham,age:21</span></span><br><span class="line"></span><br><span class="line">msg=<span class="string">'name:%s,age:%s'</span>                <span class="comment"># %s 表示格式化字符串，%d 表示格式化整数，%f 表示浮点数</span></span><br><span class="line">print(msg %(<span class="string">'ham'</span>,<span class="string">'21'</span>))            <span class="comment"># name:ham,age:21</span></span><br><span class="line">msg=<span class="string">'name:%s,age:%d'</span></span><br><span class="line">print(msg %(<span class="string">'ham'</span>,<span class="number">21</span>))              <span class="comment"># name:ham,age:21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.6 版本开始引入一个另一个新的方法 f，性能要比前两者更好，也更简洁</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">print(<span class="string">f'123<span class="subst">&#123;b&#125;</span>'</span>)                    <span class="comment"># 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作</span></span><br><span class="line">[a:b:c]    <span class="comment"># 字符串截取，返回的是原字符串索引为a到b的字符串（前包后不包）；c参数指步长，即a到b的字符中，每c个字符中取一个字符</span></span><br><span class="line">print(a[<span class="number">0</span>::])        <span class="comment"># 和 [::] 一样，从开始到末尾    123456</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>])        <span class="comment"># 截取索引 0，1，2             123</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">-1</span>])       <span class="comment"># 截取到索引为 -1 的前一位      12345</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">-1</span>:<span class="number">2</span>])     <span class="comment"># 135</span></span><br><span class="line">print(a[<span class="number">0</span>::<span class="number">2</span>])       <span class="comment"># 135</span></span><br><span class="line">print(a[<span class="number">-4</span>:<span class="number">-1</span>])      <span class="comment"># 345</span></span><br><span class="line">print(a[::])         <span class="comment"># 这个方法也是一种拷贝原字符串的方法   123456</span></span><br></pre></td></tr></table></figure></div><h4 id="数字类型常用方法"><a href="#数字类型常用方法" class="headerlink" title="数字类型常用方法"></a>数字类型常用方法</h4><p>​    数字类型包括了：int，float，long，complex 和 bool，因为 bool 其实是继承了 int ，因此可以用 0 表示 False，1 表示 True，<strong>注意点：</strong>python 对于数字的存储有一个叫 “<strong>小数据池</strong>“ 的东西，用来存储 <strong>-5 到 256</strong> 的数字以及有规律的字符串，例如 ‘s’*20（到 21 的话内存地址就不一样了），范围中的数字被使用，所指向的 id 内存地址是一致的，但是在 pycharm 中测试结果与此不同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进制转换</span></span><br><span class="line">bin()              <span class="comment"># 十转二</span></span><br><span class="line">print(bin(<span class="number">2</span>))      <span class="comment"># 0b10   0b 表示二进制</span></span><br><span class="line">oct()              <span class="comment"># 十转八</span></span><br><span class="line">print(oct(<span class="number">8</span>))      <span class="comment"># 0o10   0o 表示八进制   0-7 是八进制正常表示范围，之后就是逢八进一</span></span><br><span class="line">hex()              <span class="comment"># 十转十六</span></span><br><span class="line">print(hex(<span class="number">16</span>))     <span class="comment"># 0x10   0x 表示十六进制 0-9 正常显示，10-15 从 a-f，逢十六进一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line">abs()              <span class="comment"># 返回数字的绝对值</span></span><br><span class="line">max()              <span class="comment"># 返回给定参数中最大的数字</span></span><br><span class="line">min()              <span class="comment"># 同上，返回最小值</span></span><br><span class="line">pow(a,b)           <span class="comment"># 返回 a 的 b 次方，等同于 a**b</span></span><br><span class="line">round(a,b)         <span class="comment"># 返回 a 的四舍五入的结果，默认不给参数 b 则返回整数值，参数 b 控制返回的结果中要保留的小数位数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算符</span></span><br><span class="line"><span class="comment"># 包括 +，-，*，/，++，--，**，//，+=，-=，*=，/=，%</span></span><br><span class="line">**                 <span class="comment"># 用于幂计算，计算次方数</span></span><br><span class="line">//                 <span class="comment"># 整除，如果包含小数，结果向下取整，如果除数和被除数有一者是 float，结果也会是 float</span></span><br><span class="line">/                  <span class="comment"># 需要注意的是，python3 中的 / 结果是包含小数点的，也就是返回 float；而在 python2 中 / 的结果是整数 int，但是如果有一方是 float，结果也会是 float</span></span><br><span class="line">%                  <span class="comment"># 表示取余数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有序整数列表</span></span><br><span class="line">range(a,b,c)        <span class="comment"># 生成元素 a-b 的一个列表，c 为步长数，默认为1，range 一般会在循环中使用，来控制循环次数</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)     <span class="comment"># 10 以内的奇数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提一点 range 是不能用 print 直接查看结果的，使用 type 查看类型，会得到 &lt;class 'range'&gt;，需要进行转换，使用 list(range(0,10)), 才能查看结果</span></span><br></pre></td></tr></table></figure></div><p>​    random 库，是一个内置库，用来产生随机数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice(iter)        <span class="comment"># 从可迭代对象参数中，随机取一个元素，返回结果是包含这个元素的 list</span></span><br><span class="line">random.randrange(a,b,c)    <span class="comment"># 随机从 a-b 中抽取一个数，c 为步长基数，默认是 1</span></span><br><span class="line">random.randint(a,b)        <span class="comment"># 随机生成一个 a-b 的整数，包含 a 也包含 b</span></span><br><span class="line">random.random()            <span class="comment"># 随机生成一个 0-1 的小数，包含 0 但是不包含 1</span></span><br><span class="line">random.uniform(a,b)        <span class="comment"># 随机生成 a-b 的小数，小数点后有 16 位</span></span><br><span class="line">random.sample(iter,num)    <span class="comment"># 从可迭代对象中随机去取 num 个元素，返回类型是 list</span></span><br><span class="line">random.shuffle(iter)       <span class="comment"># 将可迭代对象的元素顺序随机打乱</span></span><br></pre></td></tr></table></figure></div><h4 id="列表的常用方法"><a href="#列表的常用方法" class="headerlink" title="列表的常用方法"></a>列表的常用方法</h4><p>​    列表是一个可迭代对象的数据类型，可以存储包含 字符串，数字，布尔，字典 等其他的数据类型，当然也可以是自己，也就是列表嵌套列表的结构。列表也是可以通过切片操作来获取元素的，列表的元素和字符串一样，下标索引都是从 0 开始依次往后 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">append()                   <span class="comment"># 在列表的最后追加指定元素</span></span><br><span class="line">insert(index,item)         <span class="comment"># 在列表中指定的索引为 index 的位置，插入 item</span></span><br><span class="line">extend(iter)               <span class="comment"># 在原列表的最后追加可迭代对象 iter 的每一个元素，效果和 '+' 一样 </span></span><br><span class="line">pop(index)                 <span class="comment"># index 默认是 -1，即默认删除列表中最后的一个元素，并将该元素返回</span></span><br><span class="line">remove(item)               <span class="comment"># 从列表中删除指定的元素</span></span><br><span class="line">clear()                    <span class="comment"># 清空当前列表的所有元素</span></span><br><span class="line">copy()                     <span class="comment"># 拷贝当前列表</span></span><br><span class="line">count(item)                <span class="comment"># 统计列表中有指定元素的总个数</span></span><br><span class="line">index(item,start,end)      <span class="comment"># 从列表中匹配找到指定元素并返回其下标索引位，可以指定开始和结束的位置来进行指定范围的匹配</span></span><br><span class="line">sort()                     <span class="comment"># 对原列表排序，默认是升序，参数 reverse 设为 True 表示降序</span></span><br><span class="line">reverse()                  <span class="comment"># 翻转原列表</span></span><br><span class="line">len(list)                      <span class="comment"># 返回列表长度</span></span><br></pre></td></tr></table></figure></div><h4 id="元组常用方法"><a href="#元组常用方法" class="headerlink" title="元组常用方法"></a>元组常用方法</h4><p>​    简单来说元组是一个可读不可改的列表，不可改也就说明元组是可哈希的，并且列表能存储的类型，元组也可以存储，所以元组的内部的元素可是不可哈希的，同时元组一样可以通过索引来执行切片获取元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count(item)                <span class="comment"># 统计元组中指定元素的出现次数</span></span><br><span class="line">index(item,start,end)      <span class="comment"># 获取指定元素在元组的下标位置，同样可以设置一个范围</span></span><br></pre></td></tr></table></figure></div><h4 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h4><p>​    字典是以 key-value 的形式存储数据，是不可哈希的，但是字典对于 key 的要求是必须可哈希</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict[key]           <span class="comment"># 返回对应 key 的value，如果 key 不存在则抛出 KeyError 的异常</span></span><br><span class="line">dict[key]=value     <span class="comment"># 通过赋值可以更改 key 对应的值，如果 key 在字典中不存在，则会在字典中加入这对 key-value</span></span><br><span class="line"><span class="keyword">del</span> dict[key]       <span class="comment"># 删除字典中的 key 和对应的 value</span></span><br><span class="line">dict.clear()        <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> dict            <span class="comment"># 删除整个字典</span></span><br><span class="line">dict.copy()         <span class="comment"># 拷贝当前字典</span></span><br><span class="line">get(key, value)     <span class="comment"># get 方法获取 key 对应的值，但是 key 如果不存在不会抛出异常，value 参数用于指定如果 key 获取不到值，就将这个参数的值作为默认值</span></span><br><span class="line">pop(key，value)     <span class="comment"># pop 方法用于删除 key，会返回 key 对应的值，如果 key 不存在会抛出异常 KeyError，设置 value 参数的值，可以作为异常时返回的值</span></span><br><span class="line">popitem()           <span class="comment"># 默认刷出字典中最后一对 key-value</span></span><br><span class="line">keys()              <span class="comment"># 返回一个 dict_keys 的列表，包含该字典中所有的 key</span></span><br><span class="line">values()            <span class="comment"># 返回一个 dict_values 列表，包含所有的值</span></span><br><span class="line">items()             <span class="comment"># 返回一个 dict_items 列表，其中每一个元素是 (key, value) 的元组</span></span><br><span class="line">update(&#123;key:value&#125;)   <span class="comment"># 将所给的字典参数的键值更新到当前的字典中，如果 key 存在就替换 value</span></span><br><span class="line"></span><br><span class="line">fromkeys(sqe,value)   <span class="comment"># 从可迭代的参数 sqe 中将每一个元素作为字典的 key，不设参数 value 时，默认字典会给每个 key 的值赋为 None，设置 value 时，则所有键的值都是这个 value</span></span><br><span class="line">has_key(key)        <span class="comment"># 判断指定的 key 是否存在于当前字典</span></span><br><span class="line">setdefault(key,default)    <span class="comment"># 在字典中添加键值，如果字典中存在 key 则不会改动，不存在则加入这个键值</span></span><br></pre></td></tr></table></figure></div><h4 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h4><p>​    集合是一个无序且数据不能重复的序列，所以可以用来进行去重操作，与字典类似但是没有 value，集合中存储的都是 key，且 key 一样都要是可哈希的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">add()               <span class="comment"># 添加一个元素，如果元素存在就不添加，参数不能是 list，dict，tuple</span></span><br><span class="line">update()            <span class="comment"># 可以添加多个元素，参数类型可以是 list，dict，tuple，字典的就直接将 key 加入</span></span><br><span class="line">remove(ele)         <span class="comment"># 移除集合中的指定的元素，如果元素不存会抛出 KeyError 异常</span></span><br><span class="line">discard(ele)        <span class="comment"># 同上，但是不会抛出异常</span></span><br><span class="line">pop()               <span class="comment"># 如果集合是纯数字类型元素，那么 pop 方法会将集合变为有序，然后删除第一个元素；如果集合是有字符串类型的元素，pop 方法会将其无序化，然后随机删除一个元素</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">print(a)            <span class="comment"># &#123;1, 2, 'a', 6, 'c'&#125;</span></span><br><span class="line">print(a.pop())      <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">b = set(<span class="string">'asdfg'</span>)</span><br><span class="line">print(b)            <span class="comment"># &#123;'a', 'd', 'f', 's', 'g'&#125;</span></span><br><span class="line">print(b.pop())      <span class="comment"># a</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">9</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(a)            <span class="comment"># &#123;1, 2, 4, 5, 6, 8, 9&#125;</span></span><br><span class="line">print(a.pop())      <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">x <span class="keyword">in</span> set            <span class="comment"># 判断元素 x 是否在集合 set 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合的运算</span></span><br><span class="line">|                   <span class="comment"># 并集（例: print(pythons.union(linuxs))）</span></span><br><span class="line">&amp;                   <span class="comment"># 交集（例: print(pythons.intersection(linuxs))）</span></span><br><span class="line">-                   <span class="comment"># 差集（例: print(pythons.difference(linuxs))）</span></span><br><span class="line">^                   <span class="comment"># 对称差集（例: print(pythons.symmetric_difference(linuxs))）</span></span><br><span class="line">a == b              <span class="comment"># 判断集合 a 和 b 是否一致</span></span><br><span class="line">a &gt; b               <span class="comment"># 判断集合 a 是否包含集合 b 的所有元素，同理还有符号 '&lt;'</span></span><br><span class="line">a &gt;= b              <span class="comment"># 判断集合 a 是否包含所有集合 b 的元素或和集合 b 一致，同理还有符号 '&lt;='</span></span><br><span class="line">a.issuperset(b)     <span class="comment"># 判断集合 a 是否是集合 b 的父集，即包含集合 b 的元素</span></span><br><span class="line">a.issuberset(b)     <span class="comment"># 同上，判断 a 是否是 b 的子集</span></span><br></pre></td></tr></table></figure></div><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if…else-判断"><a href="#if…else-判断" class="headerlink" title="if…else 判断"></a>if…else 判断</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:           <span class="comment"># if 判断 condition 为 T 执行 ①</span></span><br><span class="line">①……</span><br><span class="line"><span class="keyword">elif</span> condition:         <span class="comment"># if 判断为 F 进入 elif 判断 condition 为 T 执行②</span></span><br><span class="line">②……</span><br><span class="line"><span class="keyword">else</span>:                   <span class="comment"># 上面判断都不通过执行 else 的 ③</span></span><br><span class="line">③……</span><br><span class="line"></span><br><span class="line">a = <span class="number">3000</span></span><br><span class="line">b = <span class="number">300</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    print(<span class="string">'a&gt;b'</span>)</span><br><span class="line"><span class="keyword">elif</span> a &lt; b:</span><br><span class="line">    print(<span class="string">'a&lt;b'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'a!=b or a=b'</span>)</span><br><span class="line"><span class="comment"># a&gt;b</span></span><br></pre></td></tr></table></figure></div><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>​    语法： <code>for i in iter:</code> ，从可迭代对象中每一次遍历时，依次向后出去元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>​    语法： <code>while condition:</code> ，根据条件 condition 判断是否为 True，为 True 则执行内部代码块。但是 <code>while True:</code> 代表的是无限循环，就是死循环，所以循环体内部需要去修改 condition 来退出循环</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">condition = <span class="literal">True</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">print(i)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">condition = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><p>​     while 的语法中是有判断的， 所以也可以使用 else </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">11</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'over'</span>)    <span class="comment"># else 的内部代码只有在循环条件不满足并且循环没有被 break 退出才会执行</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><h4 id="退出循环"><a href="#退出循环" class="headerlink" title="退出循环"></a>退出循环</h4><p>​    上面里的例子使用了 break 来退出循环语句，来执行后续的代码；还有另一种就是 continue ，与 break 不同的是， continue 的作用是退出当前的循环，进入下一次的循环</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i)                   <span class="comment"># 0 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)                   <span class="comment"># 0 1 2 3 5，当 i = 4 时，continue 跳到下一次循环开始，i = 5</span></span><br></pre></td></tr></table></figure></div><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>​    有两种方式，一种使用 open() 正常打开文件进行处理，但是最后需要手动将文件关闭，避免一直占用系统资源；另一种常用的方式是使用 with 创建上下文管理器，这种方式在处理完成后，无需手动去关闭，当文件没有被使用的情况下，上下文管理器会自动关闭掉打开的文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'11.txt'</span>, <span class="string">'r'</span>)      </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:       <span class="comment"># 如果只是对文件只读操作，需要加上异常捕获</span></span><br><span class="line">    print(<span class="string">'文件不存在'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'12.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>​    打开文件时，需要给予读写模式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#39;r&#39;:  默认的模式，表示读取文件，如果文件不存在会抛出异常</span><br><span class="line">&#39;w&#39;:  表示对文件进行写入，如果文件不存在则会创建文件，如果文件存在则会进行覆盖</span><br><span class="line">&#39;a&#39;:  同上，但是不同是的，这种模式表示追加写入，所以如果文件存在，内容是追加写入，而不是覆盖</span><br><span class="line">&#39;x&#39;:  创建文件，如果文件存在则会抛出文件存在的异常 FileExistsError</span><br><span class="line"></span><br><span class="line"># 下面这两个用于和上面的配合</span><br><span class="line">&#39;b&#39;: &#39;rb&#39;,&#39;wb&#39;,&#39;ab&#39;，在原本含义功能不变的原则下，&#39;b&#39;用来表示对二进制的文件进行处理</span><br><span class="line">&#39;+&#39;: 配合这个符号，则表示同时拥有读与写，例如 &#39;r+&#39;,&#39;w+&#39;,&#39;a+&#39;,&#39;rb+&#39;,&#39;wb+&#39;,&#39;ab+&#39;</span><br></pre></td></tr></table></figure></div><p>​    同时还有一个注意点就是，读的模式下，文件指针全部在文件的开头，追加的模式下，文件的指针会在文本的末尾</p><h4 id="内容读取"><a href="#内容读取" class="headerlink" title="内容读取"></a>内容读取</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read(size)           <span class="comment"># 读取指定 size 字节长度的内容</span></span><br><span class="line">readline()           <span class="comment"># 只读取一行的内容，最后包括换行符 \n</span></span><br><span class="line">readlines()          <span class="comment"># 读取所有的内容，通过换行符将每一行作为一个元素保存在列表返回</span></span><br></pre></td></tr></table></figure></div><h4 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write(p_str)                <span class="comment"># 将字符串写入到文件中，会返回写入的字符长度</span></span><br><span class="line">write(sequence_of_strings)  <span class="comment"># 将一个字符串的序列写入文件，等同于对每个字符串使用 write 方法写入</span></span><br></pre></td></tr></table></figure></div><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>​    上面的文件处理就使用了异常捕获来对抛出的异常进行处理，使得程序可以正常执行，而不是被异常阻断</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整的异常捕获逻辑，通常使用 try... except... 就能够满足异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 可能出现错误的代码块</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:     <span class="comment"># 万能的异常捕获处理，只要抛出异常都会被其捕获</span></span><br><span class="line"><span class="comment"># except 可以根据可能出现的错误类型进行添加，当出现 try 中的代码块出现异常则执行对应错误类型的except的代码块</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># else 的代码只有在 try 中代码执行没有问题的情况下执行，其作用就是防止一些意想不到的问题，并且 except 又没有捕获到</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"><span class="comment"># finally 的语句是指无论 try 是否出现错误都会执行的代码块</span></span><br></pre></td></tr></table></figure></div><h4 id="常见的异常类型"><a href="#常见的异常类型" class="headerlink" title="常见的异常类型"></a>常见的异常类型</h4><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>NameError</td><td>尝试访问一个没有声明的变量等</td></tr><tr><td>SyntaxError</td><td>语法出现错误，可能就是单词错误或是符号问题</td></tr><tr><td>IndexError</td><td>下标索引超出序列的范围，循环遍历时或是按照下标取元素会出现这个问题</td></tr><tr><td>KeyError</td><td>尝试请求一个不存在于字典的主键</td></tr><tr><td>AttributeError</td><td>尝试访问一个未知的对象属性</td></tr><tr><td>ValueError</td><td>传递的参数不正确，传递过多或过少的参数等</td></tr><tr><td>TypeError</td><td>传递的参数类型不被支持进行操作等</td></tr><tr><td>ZeroDivisionError</td><td>当除数为 0 的错误</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h4 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h4><p>​    上面使用过 “万能的异常处理”，即   <code>except Exception as e</code> ，但是这样的处理如果被记录到日志中，却不好排查具体的错误原因，所以通常情况下还是去使用规定的异常名去独自处理各自异常捕获。但是有时候程序可能并不会抛出所感知到的异常，因此可以手动地抛出异常去进行捕获，即使用 ‘raise’ 语法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">'错啦错啦'</span>)</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)      <span class="comment"># 错啦错啦</span></span><br></pre></td></tr></table></figure></div><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>​    通过上面表里列出的异常和描述，不难看出其实这些异常可能对应的情况有多种，如果想要精确的捕获一种情况的异常错误，可以使用自定义异常，但前提自定义异常的类需要继承 BaseException</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span><span class="params">(BaseException)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">self.msg = msg</span><br><span class="line"><span class="comment"># def __str__(self):   可以不用写这个方法，因为那个BaseException父类里面已经实现了</span></span><br><span class="line"><span class="comment">#     return self.msg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">raise</span> myException(<span class="string">'错啦错啦'</span>)</span><br><span class="line"><span class="keyword">except</span> myException <span class="keyword">as</span> e:</span><br><span class="line">print(e)       <span class="comment"># 错啦错啦</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础整理</title>
      <link href="/1520610863/"/>
      <url>/1520610863/</url>
      
        <content type="html"><![CDATA[<h2 id="编程知识简单整理"><a href="#编程知识简单整理" class="headerlink" title="编程知识简单整理"></a>编程知识简单整理</h2><h3 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h3><p>这个世界上有非常多的编程语言，他们大部分都可以胜任一个或多个领域的代码编程，但是各自之间的编程方式或执行方式都有些不同。从编程角度上分为三种：机器语言，汇编语言，高级语言</p><p><strong>机器语言：</strong>简单来说就是通过使用计算机底层的二进制码，也就是通过 0 和 1 编写机器指令来执行程序。通常来说，这个要求是非常大的，即不好记忆，也不方便对其进行阅读，但是执行非常快</p><p><strong>汇编语言：</strong>类似与机器语言，但是对其进行了优化，通过将英文缩写来代替代码指令，称为 “助记符”，但是依旧通过编写指令来执行</p><p><strong>高级语言：</strong>进一步在汇编的基础上，将相关指令合成单条指令，形成了对指令的封装，让代码编写更简单，偏向人类思维方式，也更方便代码阅读</p><p>从执行上来说：机器语言使用二进制码，因此可以被CPU直接解读执行；汇编语言和高级语言的编写会产生一个 <strong>源程序</strong> 文件，这个文件不能被直接执行。对于汇编语言，需要汇编程序将源程序进行翻译并生成目标程序来执行。对于高级语言，又分成 <strong>解释型</strong> 或 <strong>编译型</strong> 两种程序进行翻译执行。需要知道的是，机器语言和汇编语言因为编写复杂，难以记忆和阅读，也被称为 “低级语言”</p><h3 id="解释型和编译型"><a href="#解释型和编译型" class="headerlink" title="解释型和编译型"></a>解释型和编译型</h3><p>两种类型的执行方式，其实都是需要对代码进行一个机器码的翻译过程，但是两者方式并不同</p><p><strong>编译型</strong>（c，c++ 等）</p><p>优点：编译器一般会有预编译的过程对代码进行优化，完成后运行不需要再次编译，所以编译型语言的程序执行效率高，编译后的文件可以脱离开发环境独立运行。需要知道的是，编译器的目的实现代码翻译机器码，并且会有两个步骤分别是编译和链接，链接是为了将模块的机器码和依赖库串连起来</p><p>缺点：编译之后，如果要修改代码，那么就需要重新在编译一次。并且编译会根据当前操作系统环境生成机器码，不同的操作系统间移植会有问题，跨平台性相对较差</p><p><strong>解释型</strong>（python，javascript 等）</p><p>优点：有良好的平台兼容性，在任何环境中都可以运行，但是前提需要安装解释器 (虚拟机)。因为不是整体编译后才能执行，所以相对更灵活，代码支持动态修改</p><p>缺点：由于是边解释编译，边执行，因此执行效率比较低。而且因为没有整体编译后的执行文件，所以执行上就必须依赖于解释器</p><h3 id="动态和静态"><a href="#动态和静态" class="headerlink" title="动态和静态"></a>动态和静态</h3><p>通常语言的分类中也会提到动态语言和静态语言，两者主要的区别是：在运行过程中，是否能够改变代码结构，变量是否需要声明数据类型。</p><p><strong>动态语言</strong> 可以再运行时进行函数，对象等引用，或是删除已有的函数等，能够改变自身结构；同时，动态语言在运行时就会确定数据类型，变量的类型会按照被赋的值的类型判断，例如：Python，JavaScript 等</p><p><strong>静态语言</strong> 即不支持结构上的修改，同时变量使用，需要提前声明数据类型</p><p>通常情况下解释型语言也是动态类型语言，编译型语言也是静态类型语言</p><h3 id="强类型和弱类型"><a href="#强类型和弱类型" class="headerlink" title="强类型和弱类型"></a>强类型和弱类型</h3><p><strong>强类型</strong> 语言表示一旦变量被制定了数据类型，除非进行了强制转换，否则就一直是原来的类型，并且强类型中整型不能和字符串共同处理</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a += '1'</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#3&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a += <span class="string">'1'</span></span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +=: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></table></figure></div><p><strong>弱类型</strong> 就基本忽略了数据类型，一个变量可以被赋予不同的数据类型的值，并且支持整型与字符串的处理，规则上会将整型强制转换为字符串来操作，得到结果将属于字符串类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">a += <span class="string">'1'</span></span><br><span class="line"><span class="string">"11"</span></span><br></pre></td></tr></table></figure></div><p><strong>总结：</strong></p><p><a href="https://pic2.zhimg.com/80/b0aeb7ffd1667b9162e5329154d43777_720w.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://pic2.zhimg.com/80/b0aeb7ffd1667b9162e5329154d43777_720w.jpg" class="lazyload"></a></p><p>​    图片来之知乎：<a href="https://www.zhihu.com/question/19918532" target="_blank" rel="noopener">https://www.zhihu.com/question/19918532</a> </p><h2 id="编码类型"><a href="#编码类型" class="headerlink" title="编码类型"></a>编码类型</h2><p>​    常见的有：ASCII，GBK，Unicode，UTF-8，UTF-16 等，需要知道 1 字节（B，byte）= 8 位（bit），二进制表示位就是 0000000，往上是 1KB = 1024 B，1MB = 1024 KB 等等</p><p>​    ASCII：一个英文字母使用一个字节，包含大小写英文字母，0-9， 常规的标点符号和扩展的符号等，范围是 0 - 255</p><p>​    GBK：中国制定的一套自己的编码规则，使用 2 个字节（16位）表示一个中文汉字，对于英文依旧使用 1个字节 = 1字母，还有一套中文编码 GB2312，表示国家标准第2312条</p><p>​    Unicode：也叫万国码，包含了全世界所有的字符，但是 unicode 只是一个理论上的编码方式，它有不同的编码实现</p><p>​    UTF-8：是可变长度的 unicode ，对于英文依旧使用 1个字节（8位）存储，欧洲其他文字使用 2个字节（16位），中文使用 3个字节（24位）</p><p>​    UTF-16：也是 unicode 的方式之一，但是全部将所有字符全部统一使用 16位 进行存储</p><p>​    另外，python 的发布要比 unicode 的要早，所以这也就是为什么在 python2 的版本中使用的是 ASCII 的编码方式</p><h2 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h2><p>​    python 中数据类型有 str，int，list，tuple，dict，bool，set</p><p>​    其中分为<strong>可变对象，不可哈希</strong>的是：<strong>list，dict，set</strong>；分为<strong>不可变对象，可哈希</strong>的是：<strong>str，int，tuple</strong></p><pre><code>### 不可变，可哈希</code></pre><p>​    什么是不可变，就是说不同的值需要使用不同的内存地址，例如对 python 的 str 进行操作，得到结果是使用另一个内存地址，而不是原来的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">print(id(a))    <span class="comment"># 2673291651144</span></span><br><span class="line"></span><br><span class="line">a += <span class="string">'world'</span></span><br><span class="line">print(id(a))    <span class="comment"># 2673311883696</span></span><br></pre></td></tr></table></figure></div><p>​    一个对象可哈希，那么在生存期内必须是不可变的，且这个对象内部需要一个哈希函数，和一个用来比较的方法，用来比较哈希的值。也就是说如果一个对象是可哈希的，它的内部需要有的魔法方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) __eq__() 或者 __cmp__()</span><br><span class="line">2) __hash__()</span><br></pre></td></tr></table></figure></div><p>​    这里有一个<strong>注意点</strong>：</p><p>​    python 中一切皆为对象，并且所有的类都有一个共同的继承父类就是 object，但是 object 类中是有提到的可哈希需要的两个方法的，下面的实例中我将他们移到了最前面，同时 dir() 方法的目的是为了显示对象中所有的方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(dir(object))</span><br><span class="line">[<span class="string">'__eq__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>,  <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</span><br></pre></td></tr></table></figure></div><p>​    所以，当使用 dir() 查看 list 或其他可变对象时，也能看到      <code>__eq__</code> 和 <code>__hash__</code> ；并且如果自定义一个类，当调用 hash() 方法时，也可以得到一个 hash值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>, self.color)</span><br><span class="line"></span><br><span class="line">car = Car(<span class="string">'blue'</span>)</span><br><span class="line">print(hash(car))     <span class="comment"># 143713058673</span></span><br></pre></td></tr></table></figure></div><h3 id="可变，不可哈希"><a href="#可变，不可哈希" class="headerlink" title="可变，不可哈希"></a>可变，不可哈希</h3><p>​    上面说到内存地址不一致，表明这个对象是不可变的，反之如果一个对象操作后 id 不变，那就是一个可变对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(id(a))     <span class="comment"># 2241896735240</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line">print(id(a))     <span class="comment"># 2241896735240</span></span><br><span class="line">print(a)         <span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></div><p>​    由此可知，为什么 python 中的字段不能使用 可变数据类型，因为字典的查找会通过 key 找对应的值，如果 key 使用可变类型，就会导致不同的值最后依赖的是相同的 key，这显然是不对的</p>]]></content>
      
      
      <categories>
          
          <category> 编程基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/undefined/"/>
      <url>/undefined/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello~ world : )"></a>Hello~ world : )</h3><p>​    终于，我的博客问世了，可喜可贺。为什么要弄博客呢，最重要的目的其实就是为了做技术积累，和一些生活记录吧，以往总是在学习之后，只是使用 word 或 思维导图去做一些记录，但是怎么看怎么丑，而且查看起来也不是特别的方便，于是就开始了一段博客搭建之旅。</p><p>​    这一说，还有些惭愧了，自己也不是技术能人，只是会些皮毛的小角色。在搭建博客的过程中，一度一拖再拖，仅仅就是弄了框就什么也没弄了，简直 “鸽子王”。好在，这些天终于弄好了，虽然整体上来说弄得有点胡里花哨的，加载也挺慢，图片也不美，但，但是也算是有个完整的了嘛。那接下来的就是，将之前的文本记录整理整理，陆续加入了这个博客中了。</p><p>​    最后，祝愿一切都好！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行代码</span></span><br><span class="line">print(<span class="string">"hello-world :)"</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://alexham.coding.net/p/alexham/d/alexham/git/raw/master/img/h-w.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://alexham.coding.net/p/alexham/d/alexham/git/raw/master/img/h-w.gif" class="lazyload"></a> </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
