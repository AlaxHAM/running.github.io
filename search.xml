<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python基础语法(二)</title>
      <link href="/997618812/"/>
      <url>/997618812/</url>
      
        <content type="html"><![CDATA[<h2 id="python-基础语法-二"><a href="#python-基础语法-二" class="headerlink" title="python 基础语法 - 二"></a>python 基础语法 - 二</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>​    函数出现目的是为了实现代码的复用，防止相同的操作需要反复编写相同的逻辑，当需要被调用到时，只需要去调用对应的函数就可以得到处理后的结果</p><h4 id="函数定义与调用"><a href="#函数定义与调用" class="headerlink" title="函数定义与调用"></a>函数定义与调用</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(参数1，参数2)：</span><br><span class="line">&#39;&#39;&#39;函数注释&#39;&#39;&#39;</span><br><span class="line">... </span><br><span class="line">函数体</span><br><span class="line">...</span><br><span class="line">return 返回值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数名(参数1，参数2)      # 调用函数</span><br></pre></td></tr></table></figure></div><p>​    函数名必须是包含 <strong>字母，数字或下划线</strong>，但是 <strong>不能以数字开头</strong>，且函数名最好有可读性，方便通过名字知道函数的功能</p><p>​    return 语法表示结束函数的执行，并且返回值可以是任何数据类型；如果一个函数有返回值，就需要使用变量去接受这个 return 的值，否则调用执行函数是没有效果的</p><p>​    对于 return 的返回结果，如果函数体最后不写 return ，函数执行结束默认返回的是 None；如果函数体最后只写了 return，后面没有写具体返回值，那么也是会返回 None</p><p>​    return 也可以返回多个值，并且多个值之间要是用 ‘,’ 隔开，最后会以元组的形式将其返回，所以对于接收者，可以是一个变量，那就是接收到一个元组，如果是多个变量，那就一一对应接收</p><h4 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h4><p>​    首先，写在函数定义中的参数都称为 <strong>形参</strong>；而在调动函数的时候，填写的参数称为 <strong>实参</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func(arg):          # arg 就是形参</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">a &#x3D; func(&#39;hello&#39;)       # &#39;hello&#39; 就是实参</span><br></pre></td></tr></table></figure></div><p>​    函数是可以接收多个参数的传递的，多个参数之间也是使用 ‘,’  隔开，但是毕竟这些参数是供函数使用的，因此需要进行划分，来指明参数和参数之间的使用区别，形参的顺序上是：<strong>位置传参，默认值传参，关键字传参 以及 动态传参</strong> ，另外 <strong>函数的参数也可以是函数</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>)  </span><br><span class="line"><span class="comment"># 1 2    # 位置传参，即实参顺序对应形参顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b=<span class="number">2</span>)</span>:</span></span><br><span class="line">    print(a,b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 1 2    # 默认值传参，即给形参赋予默认的值，即使实参没有传递对应参数，也不会报错，且函数会使用默认的参数值进行逻辑处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b=<span class="number">2</span>,c=<span class="number">10</span>)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, c=<span class="number">4</span>, b=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 1 5 4   # 关键字传参，即实参传递时就指定好形参的变量进行传递，让对应的形参变量取值</span></span><br></pre></td></tr></table></figure></div><p>​    动态传参是一个特殊的传参方式，用来处理要传入的参数有很多的情况，分两种    <code>*args</code> 和 <code>*kwargs</code> </p><p>​    <code>*args</code> 将多个参数组成 <strong>元组形式并打散传入给位置参数</strong></p><p>​    <code>*kwargs</code> 将多个参数组成 <strong>字典形式并打散传入给关键字参数</strong> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)                       <span class="comment"># 1 2 3</span></span><br><span class="line">func(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])                    <span class="comment"># 1 2 3</span></span><br><span class="line">func(*<span class="string">'123'</span>)                      <span class="comment"># 1 2 3</span></span><br><span class="line">func(*&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;)      <span class="comment"># a b c   如果 agrs 是字典的形式， * 打散后只会去其中的 key</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b,**kwargs)</span>:</span></span><br><span class="line">    print(a,b)                    <span class="comment"># a b</span></span><br><span class="line">    print(kwargs)                 <span class="comment"># &#123;'x': 2, 'y': 3, 'z': 4&#125;  参数 a 和 b 之后的关键字参数被组成了一个字典</span></span><br><span class="line">    print(*kwargs)                <span class="comment"># x y z</span></span><br><span class="line"></span><br><span class="line">func(<span class="string">'a'</span>,b=<span class="string">'b'</span>,x=<span class="number">2</span>,y=<span class="number">3</span>,z=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></div><p>​    <strong>补充点：强制使用命名参数   ‘*’</strong></p><p>​    即调用传参的时候，必须要使用变量名赋值的形式，例如   <code>func(a,*,b)</code> ，这个函数的定义中在 * 号后面的 b，就必须在调用传参时写明 ‘ b= ‘，而前面的 a 则可以使用命名也可以不使用，继续按照位置传参也可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,*,b)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)      <span class="comment"># TypeError: func() takes 1 positional argument but 2 were given</span></span><br></pre></td></tr></table></figure></div><h4 id="命名空间与作用域"><a href="#命名空间与作用域" class="headerlink" title="命名空间与作用域"></a>命名空间与作用域</h4><p>​    <strong>命令空间</strong> 由外到内：<strong>内置命名空间，全局命名空间，局部命名空间</strong></p><p>​    内置命名空间，即 python 解释器自带的内置函数；全局命名空间，即全局范围下创建存储，例如简单的一个变量赋值，这个变量就存在于全局的空间中；局部命名空间，即执行函数时，函数内部创建了新的变量，这些变量会被临时在存放定义函数的局部空间中，供函数使用，一旦函数调用执行完毕，这个空间会被释放</p><p>​    程序运行的加载顺序：</p><p>​    1）程序真正开始执行之前， 会先加载内置的命名空间</p><p>​    2）程序开始由上至下开始执行，定义在其中的变量会被加载到全局空间，此过程中解释到函数的定义时不会去执行，所以函数内部所创建的都不会被加载</p><p>​    3）函数被触发调用执行，回到函数定义的地方进行加载，内部创建的都被加入局部空间</p><p>​    函数 <strong>作用域</strong> ，也就是作用范围，这个词与命名空间是密切相关的，函数被定义调用就会创建自己的作用域，函数的作用域分为：<strong>全局作用域</strong> 和 <strong>局部作用域</strong></p><p>​    全局作用域：即在全局命名空间和内置命名空间所建立的变量都属于全局的作用域，这些变量在执行程序中的任何一个地方都可以被使用</p><p>​    局部作用域：即函数所创造的局部命名空间，这其中的变量只能在这个函数内部生效，也就是只能作用于当前的局部范围</p><p>​    函数的取值顺序：</p><p>​    1）如果变量是在自己内部，也就是由当前调用函数内部创建，直接从局部空间取值</p><p>​    2）如果变量无法在局部空间中取到值，就会往外层搜索，也就是去全局的空间找符合当前变量的值</p><p>​    3）如果全局依然没有取到值，就继续到内置的空间去搜索</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func()   <span class="comment"># 5   来自全局作用域</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">17</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">func()   <span class="comment"># 17  来自局部作用域</span></span><br></pre></td></tr></table></figure></div><p>​    之所以要分各自的范围，就是防止变量之间出现污染，因为可能会有全局和局部的变量名字一样得到情况，不划分各自范围，变量就会出现覆盖。但是如果函数内部就是想使用全局的变量的话，也是可以的，python 提供了两种方法来引用不是自己局部范围的变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">17</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a,b             <span class="comment"># global + 变量，表示在当前的函数内部引用全局的变量</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    b += <span class="number">1</span></span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line">func()                     <span class="comment"># 6 18</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a        <span class="comment"># nolocal + 外层变量，表示在当前的嵌套函数内部引用外层函数的变量，如果外层没有，会抛出语法的异常</span></span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        print(a)</span><br><span class="line">    <span class="keyword">return</span> func_2()</span><br><span class="line"></span><br><span class="line">func_1()                  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure></div><p>​    除了可以引用之外，还可以用  <strong>globals() 查看全局声明的变量</strong> 以及  <strong>locals() 查看局部声明的变量</strong></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>​    闭包本身也是一种函数，而且上面的例子中其实就是一个闭包的表现。所谓闭包，其实就是内层函数引用外层函数的变量，并且外部函数的返回是内部函数。对于判断一个函数是否是闭包函数，可以用 <code>__closure__</code> 方法，内部的这个函数是闭包函数则会返回一个元组，如果不是则会返回 None</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    print(func_2.__closure__)</span><br><span class="line">    <span class="keyword">return</span> func_2</span><br><span class="line"></span><br><span class="line">ret = func_1()</span><br><span class="line">ret()               <span class="comment"># (&lt;cell at 0x000001DEE01F0A38: int object at 0x00007FFCE67DB3F0&gt;, &lt;cell at 0x000001DEE01F06D8: function object at 0x000001DEDF196400&gt;)</span></span><br></pre></td></tr></table></figure></div><p>​     <code>__closure__</code>  方法返回的元组中会包含当前函数所有被调用的对象，注意，在 python 中一切皆对象。这个元组的第二个元素是 function object，这个即表示 func_2 是一个闭包函数</p><p>​    所以闭包的作用是：保护变量不会受执行影响，让变量常驻内存，但是也需要合理使用，因为这毕竟会占用资源</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>​    装饰器是由闭包演进而来，表现上可以说就是一个闭包函数，但是装饰器有它自己的含义。装饰器旨在不修改原函数以及调用方式的情况下，对原函数进行功能上的扩展。从上面闭包的例子可以看出，闭包函数的调用比一般函数多了一步，需要先对外层（原函数）代用，这一步得到的就是内层（闭包函数），需要再次调用这个函数才能得到内层的结果</p><p>​    例如需要得到调用函数所执行的时间，最简单就是使用 time库 在每一个函数的前后加上代码，最后做差计算得到耗时，但是这显然不符合规范。装饰器的内部函数可以通过接受需要执行的函数，并在内部的函数中进行相应的代码就可以做到对传入的函数进行耗时计算，这样提高了复用性，只需要一个装饰器函数就可以给需要的函数加上这个装饰器，而减少重复代码的编写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_count</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""返回指定的数字在斐波那契数列中对应位置的值，该斐波那契数列的第一位是0"""</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> count_num(n<span class="number">-1</span>) + count_num(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">fib_count = timer(fib_count)</span><br><span class="line">print(fib_count(<span class="number">35</span>))                <span class="comment"># 注意这里使用的依然是 fib_count 函数，调用方式并没有改变</span></span><br><span class="line"><span class="comment"># 耗时2.8533730506896973s</span></span><br><span class="line"><span class="comment"># 9227465</span></span><br></pre></td></tr></table></figure></div><p>​    上面的代码中，timer 就是一个自定义的装饰器用来计算函数的执行时间，在调用的时候，将要执行的函数传入这个装饰器，并用函数的原名做变量接收，之后再去调用这个变量。</p><p>​    这样就实现了对 fib_count 函数添加装饰器，但是这么写每次还要多写一步参数传入，所以 python 提供一个便捷的实现方式 —— “<strong>语法糖</strong>“</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timer                             # 语法糖的使用：@ + 装饰器函数名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_count</span><span class="params">(n)</span>:</span>                  <span class="comment"># 这里之所以创建一个函数将原来函数放在其中执行，是因为这个原函数使用的递归函数，而递归函数如果直接加装饰器会有问题</span></span><br><span class="line">    <span class="keyword">return</span> count_num(n)</span><br><span class="line"></span><br><span class="line">print(fib_count(<span class="number">35</span>))</span><br><span class="line"><span class="comment"># 耗时2.9062602519989014s</span></span><br><span class="line"><span class="comment"># 9227465</span></span><br></pre></td></tr></table></figure></div><h4 id="带有参数的装饰器"><a href="#带有参数的装饰器" class="headerlink" title="带有参数的装饰器"></a>带有参数的装饰器</h4><p>​    相比常规的装饰器函数，这个装饰器函数可以接受参数，但是这个参数是为了提供给这个函数使用的，装饰器函数定义好之后，任何一个加了装饰器的函数都会执行装饰器内部的代码，而此时如果一个函数需要根据情况分别在函数前或后执行不同的逻辑，再使用这个装饰器函数就会比较麻烦了，所以如果给装饰器添加参数，就能由参数来控制装饰器对不同情况进行处理</p><p>​    根据上面装饰器得到例子，现在如果对一些简单的函数觉得没有必要知道运行时间，假如这样的函数有很多，一个个处理就很耗时，通过定义变量作为参数给装饰器，让装饰器函数内部去判断就显得方便一些</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(flag)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="literal">True</span>:</span><br><span class="line">                print(<span class="string">"添加装饰器"</span>)</span><br><span class="line">                start = time.time()</span><br><span class="line">                ret = func(*args, **kwargs)</span><br><span class="line">                end = time.time()</span><br><span class="line">                print(<span class="string">"耗时&#123;&#125;s"</span>.format(end-start))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"不添加装饰器"</span>)</span><br><span class="line">                ret = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer(flag=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_num</span><span class="params">()</span>:</span></span><br><span class="line">    li = list(range(<span class="number">0</span>, <span class="number">100000</span>))</span><br><span class="line">    <span class="keyword">return</span> sum(li)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer(False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(count_num())</span><br><span class="line"><span class="comment"># 添加装饰器</span></span><br><span class="line"><span class="comment"># 耗时0.0029914379119873047s</span></span><br><span class="line"><span class="comment"># 4999950000</span></span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line"><span class="comment"># 不添加装饰器</span></span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure></div><h4 id="多个装饰器修饰一个函数"><a href="#多个装饰器修饰一个函数" class="headerlink" title="多个装饰器修饰一个函数"></a>多个装饰器修饰一个函数</h4><p>​    对于一个已定义好的函数而言，后续可能会有各种原因，需要对原来的函数进行功能上的添加，就有可能会编写很多的装饰器，而对于一个函数而言，是可以支持多个装饰器的。要注意的是，各个装饰器的顺序</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_a</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"装饰器A开始执行"</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"装饰器A结束执行"</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> innner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_b</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"装饰器B开始执行"</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"装饰器B结束执行"</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> innner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_a           # 执行时，会先进入装饰A中，而此时内部的函数是一个含有装饰器B的原函数</span></span><br><span class="line"><span class="meta">@decorator_b           # 装饰器A执行发现了装饰B，就会进入到装饰器B中，这个时候内部就是原函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"to day is gonna be a good day"</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># 装饰器A开始执行</span></span><br><span class="line"><span class="comment"># 装饰器B开始执行</span></span><br><span class="line"><span class="comment"># to day is gonna be a good day</span></span><br><span class="line"><span class="comment"># 装饰器B结束执行</span></span><br><span class="line"><span class="comment"># 装饰器A结束执行</span></span><br></pre></td></tr></table></figure></div><p>​    提一点，原函数里使用的是 print 函数，来将原函数执行的内容进行一个打印输入，所以在执行 装饰器B 时，内层函数执行原函数，就会立即将内容打印，所以在最后的结果中，原函数的内容是在中间</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator_a</span></span><br><span class="line"><span class="meta">@decorator_b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"to day is gonna be a good day"</span></span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line"><span class="comment"># 装饰器A开始执行</span></span><br><span class="line"><span class="comment"># 装饰器B开始执行</span></span><br><span class="line"><span class="comment"># 装饰器B结束执行</span></span><br><span class="line"><span class="comment"># 装饰器A结束执行</span></span><br><span class="line"><span class="comment"># to day is gonna be a good day</span></span><br></pre></td></tr></table></figure></div><p>​    为什么原函数改为 return 就不行了，因为当使用 return 时，两个装饰器 A 和 B 先后执行，装饰器 B 的内层函数执行原函数，这个时候原函数的返回的字符串被 ret 所接收，但是并没有返回，然后就是 装饰器B 开始结束，并将接着 return 将字符串返回（但不是真的就返回输出了，因为装饰器A 还没有结束），这个时候就回到 装饰器A 中，装饰器A 内层的 ret 所接收的就是来自 装饰器B 所返回的，但是原函数的结果还没有真正的被 return ，这时 装饰器A 结束，开始 return ret，这个时候函数调用的 print 才开始将返回结果进行打印</p><p>​    所以，虽然看似返回的结果中这两个装饰器没有对原函数进行装饰，但是整个执行的过程中，原函数也是在最内部执行的</p><p>​    <strong>补充：</strong></p><p>​    为什么要有装饰器，因为需要严格准守 “<strong>开放封闭原则</strong>“，即 <strong>对扩展开放，对修改封闭</strong> 。目的就是防止在原基础上修改导致出现程序不能执行或者bug，因此需要尽可能在不改变原基础上，去将修改的内容扩展到原来的程序上</p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>​    在上面装饰器的例子中，有一个斐波那契数列的例子，使用的就是递归函数。递归，简而言之就是函数在内部调用自己，装饰器是由嵌套函数在内层中调用其他的函数实现功能添加，递归通过调用自己实现一个循环的操作。因此递归的使用，需要在内部设置一个出口，当递归到了这个出口，就会自动停止</p><p>​    需要注意的是，递归本身是会不断调用自己的，所以会是一个死循环，但是 python 还是内部加了一个限制，默认情况下递归的程度大概是在 1000 不到的范围，一般会在 99？就会抛出异常 RuntimeError ，但是这个递归的深度是可以手动修改的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>)   <span class="comment"># 将深度改为 10000</span></span><br></pre></td></tr></table></figure></div><p>​    递归的应用有很多，比如汉诺塔问题，二分法查找等，但是递归依旧不是完美的，递归不适用于大规模的数据处理，容易造成变量常驻内存使得占用大量的资源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(li, num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(li) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这个数不在列表中"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid = len(li) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> num == li[mid]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"找到了"</span></span><br><span class="line">        <span class="keyword">elif</span> num &gt; li[mid]:</span><br><span class="line">            <span class="keyword">return</span> bin_search(li[mid + <span class="number">1</span>:], num)</span><br><span class="line">        <span class="keyword">elif</span> num &lt; li[mid]:</span><br><span class="line">            <span class="keyword">return</span> bin_search(li[:mid - <span class="number">1</span>], num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>]</span><br><span class="line">li.sort()</span><br><span class="line">print(bin_search(li, <span class="number">9</span>))     <span class="comment"># 找到了</span></span><br><span class="line">print(bin_search(li, <span class="number">12</span>))    <span class="comment"># 这个数不在列表中</span></span><br></pre></td></tr></table></figure></div><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>​    python 中匿名函数也叫 <strong>lambda 表达式</strong> ，用来表达处理相对简单的函数，匿名函数的函数体只有一行（主体是表达式，而不是一般函数中的代码块），匿名函数中多个参数之间使用 ‘,’ 隔开，参数和返回值之间使用 ‘:’ 隔开</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x, y: x+y      <span class="comment"># x, y 是匿名函数   x+y 是匿名函数的返回值</span></span><br><span class="line">ret = a(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(ret)     <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">a = <span class="keyword">lambda</span> x, y: x, y     <span class="comment"># 这里的 y 会 NameError，因为 y 没有声明，所以不会像 return 那样返回元组</span></span><br><span class="line">a = <span class="keyword">lambda</span> x, y: (x, y)   <span class="comment"># lambda 返回元组需要加上括号</span></span><br></pre></td></tr></table></figure></div><p>​    通常来说匿名函数都配合一些内置函数搭配使用，这样的函数可以减少像一般函数那样使用很多代码行来处理本身就比较简单的逻辑</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">'张楚岚'</span>, <span class="string">'张之维'</span>, <span class="string">'冯宝宝'</span>, <span class="string">'徐四'</span>, <span class="string">'王也'</span>]</span><br><span class="line">f = filter(<span class="keyword">lambda</span> el: el[<span class="number">0</span>] != <span class="string">'张'</span>, li)  <span class="comment"># 筛选第一个字不是 张 的</span></span><br><span class="line">print(list(f))            <span class="comment"># ['冯宝宝', '徐四', '王也']</span></span><br><span class="line"><span class="comment"># filter(func, iterable) 会将可迭代对象中每一个元素作为参数放入 func 中执行将结果返回，返回会是一个 filter 对象，这是一个可迭代对象，用 list 转换就可以看到最终结果</span></span><br><span class="line"></span><br><span class="line">a = map(<span class="keyword">lambda</span> x:x+<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])    <span class="comment"># 对每一个元素 +1</span></span><br><span class="line">print(list(a))                    <span class="comment"># [2, 3, 4]</span></span><br><span class="line"><span class="comment"># map(func, itreable) 同样将可迭代对象的每一个元素作为参数放入 func 执行并返回，并且返回的也是一个可迭代的对象 map，可用 list 转换返回最后的结果</span></span><br></pre></td></tr></table></figure></div><p>​    <strong>重点：</strong></p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipliers</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> multipliers()])</span><br></pre></td></tr></table></figure></div><p>​    这段代码的最终结果并不是 [0,2,4,6]，而是 [6,6,6,6]</p><p>​    这个问题的原因是因为后期绑定导致的，函数中返回的是一个列表生成式，而其中使用的是 匿名函数lambda ，可以简单的理解成列表生成式中的按照  ‘ for i in rang(4) ‘ 生成了 4 个匿名函数对象，完成后 i 的值就是最后一次遍历的 3 ，最后 print 函数也是使用的列表生成式，目的从 multipliers 函数返回得到列表中拿取每一个元素，即每一个匿名函数对象，并给其传入参数 2，由于最后 i = 3，所以当调用 m(2) 的时候，相当于 i * x = 3 * 2，也就是说列表中其实是 4 个  3 * 2，即 [6,6,6,6]</p><p>​    如果想要得到一开始所预期的结果的话，只需将函数内部的列表生成式改为生成器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipliers</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">lambda</span> x: i * x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> multipliers()])    <span class="comment"># [0, 2, 4, 6]</span></span><br></pre></td></tr></table></figure></div><h3 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h3><p>​    也叫 列表推导式，同样用来处理简单的列表类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)])</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></div><h3 id="字典表达式"><a href="#字典表达式" class="headerlink" title="字典表达式"></a>字典表达式</h3><p>​    同理于 列表表达式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items()&#125;)</span><br><span class="line"><span class="comment"># &#123;1: 'a', 2: 'b', 3: 'c'&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="集合表达式"><a href="#集合表达式" class="headerlink" title="集合表达式"></a>集合表达式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">-7</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># print(&#123;i**2 for i in s&#125;)</span></span><br><span class="line"><span class="comment"># &#123;1, 4, 36, 49, 25&#125;     # 集合自带去重</span></span><br></pre></td></tr></table></figure></div><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>​    对于 <strong>可迭代对象</strong> ，简单的理解就是可以使用 for 循环遍历的对象，例如：字符串，列表，字典等，都可以进行循环遍历。因为这类对象的类中，都提供 <code>__iter__</code> 方法，所以可使用 iter() 方法将当前的对象转换为迭代器对象</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>​    对于可迭代对象来说，只有  <code>__iter__</code> 方法显然是不够的，因为只有这个方法并不能取出这个可迭代对象的每一个元素，所以迭代器内部除了 <code>__iter__</code>  方法还有  <code>__next__</code> 方法，该方法便用于依次往后取出元素，但取到最后一个元素的时候，再次使用 <code>__next__</code> 会抛出 StopIteration 的异常，这个异常在 for 循环中会被自动捕获</p><p>​    所以迭代器的特点就是：</p><p>​    1）节省内存        2）惰性机制        3）只能依次向后取值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'123'</span></span><br><span class="line"><span class="comment"># print(dir(a))                 # dir 会将字符串包含的所有方法返回，在里面有 __iter__ </span></span><br><span class="line">print(a)                        <span class="comment"># 123</span></span><br><span class="line">a = a.__iter__()                <span class="comment"># 也可使用 iter(a)</span></span><br><span class="line">print(a)                        <span class="comment"># &lt;str_iterator object at 0x000002177E816898&gt;</span></span><br><span class="line">print(a.__next__())             <span class="comment"># 1</span></span><br><span class="line">print(a.__next__())             <span class="comment"># 2</span></span><br><span class="line">print(a.__next__())             <span class="comment"># 3</span></span><br><span class="line">print(a.__next__())             <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure></div><p>​    可迭代对象和迭代器看着很相似，简单理解可迭代器用于判断该对象是否具有可以循环遍历的功能，而迭代器提供遍历和取值的功能，python 也提供了方法去判断一个对象是可迭代对象还是迭代器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable, Iterator</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a = iter(a)</span><br><span class="line">print(isinstance(a,Iterable))  <span class="comment"># True</span></span><br><span class="line">print(isinstance(a,Iterator))  <span class="comment"># True，没有 a = iter(a) 时，返回的是 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance(o,t)   # 用于判断 对象o 是否是 类t 的子孙类，注意：这里是子孙类，不是直接子类</span></span><br><span class="line"><span class="comment"># 注意，这段代码运行是正常的，但是依然会抛出警告</span></span><br><span class="line"><span class="comment"># DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working </span></span><br><span class="line"><span class="comment"># from collections import Iterable, Iterator</span></span><br><span class="line"><span class="comment"># 从提示可以看出在新的 python 3.8 的版本开始，上面模块的导入就不成效了，只需改为</span></span><br><span class="line"><span class="comment"># from collections.abc import Iterator,Iterable 即可</span></span><br></pre></td></tr></table></figure></div><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><p>​    与普通函数很像，但是在返回的结果上不同，普通函数使用的是 return 来返回结果，但是生成器使用的是 yield 来返回结果</p><p>​    yield 语句每一次执行都会返回一个结果，并在返回后记录当前的运行位置并挂起，在下一次调用函数执行到 yield 的时候，会在上一次的位置上返回下一个结果，然后反复如此依次进行执行和返回。看着和迭代器很像，都需要依次往后执行，并且同样的，生成器函数执行到最后如果没有下一个了，也是会抛出 StopIteration 的异常</p><p>​    注意点：生成器函数的 yield 返回后的结果是无法直接查看到返回值的，因为 yield 返回的结果是一个 generator 的对象，对于这个生成器对象，需要使用 <code>__next__</code> 方法来得到真正的结果值，当然也可以使用 list 进行转化来查看所有的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">yield</span> a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> b</span><br><span class="line">    </span><br><span class="line">print(func())                 <span class="comment"># &lt;generator object func at 0x000002362EBDB9A8&gt;</span></span><br><span class="line">func = func()</span><br><span class="line">print(func.__next__())        <span class="comment"># 1</span></span><br><span class="line">print(next(func))             <span class="comment"># 2</span></span><br><span class="line">print(func.__next__())        <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure></div><p>​    另外，生成器函数支持向内部传入值，即 send() 方法，并且在 <strong>第一次执行生成器函数</strong> 的时候，只能使用 <strong>next 或者是 send(None)</strong></p><p>​    注意点：send()  和  next()  是类似的，send 不加参数的情况下得到结果与 next 的值一样，如果传值，则该值会作为下一次 yield 的位置的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="keyword">yield</span> a</span><br><span class="line"><span class="keyword">yield</span> b</span><br><span class="line"></span><br><span class="line">func = func()</span><br><span class="line">print(func.send(<span class="literal">None</span>))      <span class="comment"># 1   先执行 yield a，将 1 返回后，再将 None 赋予了 b，然后挂起</span></span><br><span class="line">print(func.__next__())      <span class="comment"># None   从上一次挂起点继续执行，所以将 b 进行 yield   </span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">print(func.__next__())      <span class="comment"># 1</span></span><br><span class="line">print(func.send(<span class="number">10</span>))        <span class="comment"># 10  上一次挂起点是 yield a，send 方法将值传入，结果被 b 接收，然后到 yield b 执行，将 10 给返回</span></span><br></pre></td></tr></table></figure></div><p>​    总结：生成器本质上和迭代器非常相似，两者都是依次向后取值，生成器表现上的一个特点是使用 yield 作为返回语句。使用 for 循环进行遍历时，生成器执行到 yield 将结果返回之后就会在当前位置挂起，等待下一次执行就从此位置开始。而使用 for 循环遍历迭代器，会一次将所有的值通过 next 来返回。所以生成器会更节省资源，因为其每一次执行只返回一个值</p><p>​    另外，在 Python3.3 中对生成器新增了一个语法：yield from，其作用相当于是简化了 for 循环语句</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line"><span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">func = func()</span><br><span class="line">print(next(func))     <span class="comment"># 1</span></span><br><span class="line">print(next(func))     <span class="comment"># 2</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">func = func()</span><br><span class="line">print(list(func))     <span class="comment"># [1, 2, 3]</span></span><br><span class="line">print(next(func))     <span class="comment"># 1</span></span><br><span class="line">print(next(func))     <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></div><h3 id="内置的一些常用函数"><a href="#内置的一些常用函数" class="headerlink" title="内置的一些常用函数"></a>内置的一些常用函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">input()          <span class="comment"># 输入函数，会将结果已字符串返回</span></span><br><span class="line">eval(str)        <span class="comment"># 将字符串转成 python 代码并执行，有返回值</span></span><br><span class="line">exec(str)        <span class="comment"># 同上，但是没有返回值</span></span><br><span class="line">print(eval(<span class="string">'123'</span>), type(eval(<span class="string">'123'</span>)))     <span class="comment"># 123 &lt;class 'int'&gt;</span></span><br><span class="line">print(exec(<span class="string">'123'</span>), type(eval(<span class="string">'123'</span>)))     <span class="comment"># None &lt;class 'int'&gt;</span></span><br><span class="line">compile()        <span class="comment"># 预编译，可以选择 eval 或 exec 模式，主要目的是为了对重复性较多或较复杂的代码编译入内存，这样在调用时就不用解释编译而是直接使用执行</span></span><br><span class="line">print()          <span class="comment"># 输出函数，参数 end=''，表示每次打印不会换行，参数 flush=True，表示是否刷新，为 True 则会将后面的输出覆盖前面的内容</span></span><br><span class="line">open()           <span class="comment"># 打开文件，第一个参数是文件路径，第二个参数的处理方式</span></span><br><span class="line">f.close()        <span class="comment"># 通常打开文件赋予变量，并完成处理后，需要将文件关闭，释放占用的空间</span></span><br><span class="line">callable(obj)    <span class="comment"># 判断对象是否是可调用的，返回 True 或 False</span></span><br><span class="line">dir(obj)         <span class="comment"># 查看一个对象所包含的方法</span></span><br><span class="line">divmod(a,b)      <span class="comment"># 返回一个元组，第一个元素是 a/b 的商，第二个元素是余数</span></span><br><span class="line">sorted(obj)      <span class="comment"># 对可迭代对象 obj 进行排序并返回新的对象，不会覆盖原来的，sort 是会覆盖原来的</span></span><br><span class="line">reversed()       <span class="comment"># 对 obj 进行反向排序，同样不会覆盖原对象，reverse 会覆盖原来的</span></span><br><span class="line">bytes(s, encoding)    <span class="comment"># 将字符串按照指定的编码规则进行编码后返回</span></span><br><span class="line">s.decode(encodin)     <span class="comment"># 将字节码 s ，按照指定编码规则进行解码</span></span><br><span class="line">enumerate(obj)        <span class="comment"># 枚举，会返回可迭代对象 obj 中每一个元素以及其下标索引，字典的话则是返回下标索引和键</span></span><br><span class="line">li = [<span class="string">'alexander'</span>, <span class="string">'hamilton'</span>]</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(li):</span><br><span class="line">print(i, j)</span><br><span class="line"><span class="comment"># 0 alexander</span></span><br><span class="line"><span class="comment"># 1 hamilton</span></span><br><span class="line">all(obj)         <span class="comment"># 判断可迭代对象 obj 中的所有元素布尔值是否都是 True，全部都是就返回 True，反之有一个不为 True，就返回 False</span></span><br><span class="line">any(obj)         <span class="comment"># 同上，但是只要其中有一个元素是 True 就返回 Ture，只有全部都是 False 才返回 False</span></span><br><span class="line">filter(func,iter)   <span class="comment"># 将可迭代对象的每一个元素放入函数执行，过滤出匹配的结果</span></span><br><span class="line">map(func,iter)      <span class="comment"># 同上，将每一个元素放入函数执行，最后将结果返回</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础语法</title>
      <link href="/3857016810/"/>
      <url>/3857016810/</url>
      
        <content type="html"><![CDATA[<h2 id="python-基础语法"><a href="#python-基础语法" class="headerlink" title="python 基础语法"></a>python 基础语法</h2><h3 id="Python种类"><a href="#Python种类" class="headerlink" title="Python种类"></a>Python种类</h3><p>​    众做周知，Python 的底层是由 C 实现的，所以常用的也是 Cpython，除此之外还有 Jpython，lronpython 等</p><p>​    Cpython 是官方的版本，在执行时 Cpython 会将 原(py)文件 转换成 字节码(pyc)文件，然后在 python 虚拟机上执行</p><p>​    Jpython 顾名思义就是由 java 实现，执行时会将代码动态编译成 java 字节码，然后在 jvm 上运行</p><p>​    IronPython 由 C# 实现，同样执行会将代码编译成 C# 字节码，然后在 CLR 运行</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>​    常用的七个数据类型：字符串，数字，列表，字典，元组，集合，布尔。其中三个是可变，四个是不可变类型，<strong>字符串，数字，元组，布尔</strong> 是<strong>不可变数据类型 (可哈希)</strong>；<strong>列表，字典，集合</strong> 是<strong>可变数据类型 (不可哈希)</strong>。同时 python 中的 布尔类型 其实继承 int 的</p><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">strip()  <span class="comment"># 移除字符串左右两边的字符，该方法有一个参数，表示指定清除的字符</span></span><br><span class="line">split()  <span class="comment"># 分割，默认会以一个空白符分割字符串，同样可以通过参数指定分割字符，分割后会返回一个 list</span></span><br><span class="line">len(str)    <span class="comment"># 返回字符串的总长度</span></span><br><span class="line">capitalize()   <span class="comment"># 首字母大写</span></span><br><span class="line">count()   <span class="comment"># 统计某一个字符的出现的个数，通过参数指定要统计的字符</span></span><br><span class="line">startswith()   <span class="comment"># 判断字符串是否以某个字符开头，通过参数指定字符，返回 True or False</span></span><br><span class="line">endswith()     <span class="comment"># 同理，判断是否以某个字符结尾</span></span><br><span class="line">find()     <span class="comment"># 查找某一个字符的索引位置，如果返回 -1 则表示搜索的字符不在目标字符串中</span></span><br><span class="line">index（）  <span class="comment"># 与 find 一样，但是使用 index 方法查找一个不存在的字符，会抛出异常 ValueError</span></span><br><span class="line">replace()  <span class="comment"># 替换，两个必传参数，被替换的字符，要替换成的字符，第三个参数是次数，默认是全部替换</span></span><br><span class="line">upper()    <span class="comment"># 字符全部转为大写</span></span><br><span class="line">lower()    <span class="comment"># 字符全部转为小写</span></span><br><span class="line">swapcase()  <span class="comment"># 字符串的大小写字母翻转</span></span><br><span class="line">join()     <span class="comment"># 连接字符，join 内部的参数是一个可迭代对象，可迭代的每一个元素要是 str，并将指定的字符作为分隔符加入到每两个字符的中间，作为新字符串返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断方法</span></span><br><span class="line">isdigit()    <span class="comment"># 判断字符串是否是纯数字组成</span></span><br><span class="line">isalnum()    <span class="comment"># 判断字符串中是否由数字或字母组成</span></span><br><span class="line">isalpha()    <span class="comment"># 判断字符创是否是纯字母组成</span></span><br><span class="line">isupper()    <span class="comment"># 判断所有字符是否都是大写</span></span><br><span class="line">islower()    <span class="comment"># 判断所有字符是否都是小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化方法</span></span><br><span class="line">format()     <span class="comment"># 将字符串的中留空的位置，替换为 format 方法指定的字符串参数，原字符串中留空数要和给定的参数数量一致，否则抛出 IndexError 异常</span></span><br><span class="line"></span><br><span class="line">msg=<span class="string">'name:&#123;&#125;,age:&#123;&#125;'</span></span><br><span class="line">print(msg.format(<span class="string">'ham'</span>,<span class="string">'21'</span>))       <span class="comment"># name:ham,age:21</span></span><br><span class="line">msg=<span class="string">'name:&#123;0&#125;,age:&#123;1&#125;,addr:&#123;0&#125;'</span></span><br><span class="line">print(msg.format(<span class="string">'ham'</span>,<span class="string">'21'</span>))       <span class="comment"># name:ham,age:21,addr:ham</span></span><br><span class="line">msg=<span class="string">'name:&#123;x&#125;,age:&#123;y&#125;'</span></span><br><span class="line">print(msg.format(x=<span class="string">'ham'</span>,y=<span class="string">'21'</span>))   <span class="comment"># name:ham,age:21</span></span><br><span class="line"></span><br><span class="line">msg=<span class="string">'name:%s,age:%s'</span>                <span class="comment"># %s 表示格式化字符串，%d 表示格式化整数，%f 表示浮点数</span></span><br><span class="line">print(msg %(<span class="string">'ham'</span>,<span class="string">'21'</span>))            <span class="comment"># name:ham,age:21</span></span><br><span class="line">msg=<span class="string">'name:%s,age:%d'</span></span><br><span class="line">print(msg %(<span class="string">'ham'</span>,<span class="number">21</span>))              <span class="comment"># name:ham,age:21</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.6 版本开始引入一个另一个新的方法 f，性能要比前两者更好，也更简洁</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">print(<span class="string">f'123<span class="subst">&#123;b&#125;</span>'</span>)                    <span class="comment"># 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作</span></span><br><span class="line">[a:b:c]    <span class="comment"># 字符串截取，返回的是原字符串索引为a到b的字符串（前包后不包）；c参数指步长，即a到b的字符中，每c个字符中取一个字符</span></span><br><span class="line">print(a[<span class="number">0</span>::])        <span class="comment"># 和 [::] 一样，从开始到末尾    123456</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>])        <span class="comment"># 截取索引 0，1，2             123</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">-1</span>])       <span class="comment"># 截取到索引为 -1 的前一位      12345</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">-1</span>:<span class="number">2</span>])     <span class="comment"># 135</span></span><br><span class="line">print(a[<span class="number">0</span>::<span class="number">2</span>])       <span class="comment"># 135</span></span><br><span class="line">print(a[<span class="number">-4</span>:<span class="number">-1</span>])      <span class="comment"># 345</span></span><br><span class="line">print(a[::])         <span class="comment"># 这个方法也是一种拷贝原字符串的方法   123456</span></span><br></pre></td></tr></table></figure></div><h4 id="数字类型常用方法"><a href="#数字类型常用方法" class="headerlink" title="数字类型常用方法"></a>数字类型常用方法</h4><p>​    数字类型包括了：int，float，long，complex 和 bool，因为 bool 其实是继承了 int ，因此可以用 0 表示 False，1 表示 True，<strong>注意点：</strong>python 对于数字的存储有一个叫 “<strong>小数据池</strong>“ 的东西，用来存储 <strong>-5 到 256</strong> 的数字以及有规律的字符串，例如 ‘s’*20（到 21 的话内存地址就不一样了），范围中的数字被使用，所指向的 id 内存地址是一致的，但是在 pycharm 中测试结果与此不同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进制转换</span></span><br><span class="line">bin()              <span class="comment"># 十转二</span></span><br><span class="line">print(bin(<span class="number">2</span>))      <span class="comment"># 0b10   0b 表示二进制</span></span><br><span class="line">oct()              <span class="comment"># 十转八</span></span><br><span class="line">print(oct(<span class="number">8</span>))      <span class="comment"># 0o10   0o 表示八进制   0-7 是八进制正常表示范围，之后就是逢八进一</span></span><br><span class="line">hex()              <span class="comment"># 十转十六</span></span><br><span class="line">print(hex(<span class="number">16</span>))     <span class="comment"># 0x10   0x 表示十六进制 0-9 正常显示，10-15 从 a-f，逢十六进一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line">abs()              <span class="comment"># 返回数字的绝对值</span></span><br><span class="line">max()              <span class="comment"># 返回给定参数中最大的数字</span></span><br><span class="line">min()              <span class="comment"># 同上，返回最小值</span></span><br><span class="line">pow(a,b)           <span class="comment"># 返回 a 的 b 次方，等同于 a**b</span></span><br><span class="line">round(a,b)         <span class="comment"># 返回 a 的四舍五入的结果，默认不给参数 b 则返回整数值，参数 b 控制返回的结果中要保留的小数位数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算符</span></span><br><span class="line"><span class="comment"># 包括 +，-，*，/，++，--，**，//，+=，-=，*=，/=，%</span></span><br><span class="line">**                 <span class="comment"># 用于幂计算，计算次方数</span></span><br><span class="line">//                 <span class="comment"># 整除，如果包含小数，结果向下取整，如果除数和被除数有一者是 float，结果也会是 float</span></span><br><span class="line">/                  <span class="comment"># 需要注意的是，python3 中的 / 结果是包含小数点的，也就是返回 float；而在 python2 中 / 的结果是整数 int，但是如果有一方是 float，结果也会是 float</span></span><br><span class="line">%                  <span class="comment"># 表示取余数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有序整数列表</span></span><br><span class="line">range(a,b,c)        <span class="comment"># 生成元素 a-b 的一个列表，c 为步长数，默认为1，range 一般会在循环中使用，来控制循环次数</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)     <span class="comment"># 10 以内的奇数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提一点 range 是不能用 print 直接查看结果的，使用 type 查看类型，会得到 &lt;class 'range'&gt;，需要进行转换，使用 list(range(0,10)), 才能查看结果</span></span><br></pre></td></tr></table></figure></div><p>​    random 库，是一个内置库，用来产生随机数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice(iter)        <span class="comment"># 从可迭代对象参数中，随机取一个元素，返回结果是包含这个元素的 list</span></span><br><span class="line">random.randrange(a,b,c)    <span class="comment"># 随机从 a-b 中抽取一个数，c 为步长基数，默认是 1</span></span><br><span class="line">random.randint(a,b)        <span class="comment"># 随机生成一个 a-b 的整数，包含 a 也包含 b</span></span><br><span class="line">random.random()            <span class="comment"># 随机生成一个 0-1 的小数，包含 0 但是不包含 1</span></span><br><span class="line">random.uniform(a,b)        <span class="comment"># 随机生成 a-b 的小数，小数点后有 16 位</span></span><br><span class="line">random.sample(iter,num)    <span class="comment"># 从可迭代对象中随机去取 num 个元素，返回类型是 list</span></span><br><span class="line">random.shuffle(iter)       <span class="comment"># 将可迭代对象的元素顺序随机打乱</span></span><br></pre></td></tr></table></figure></div><h4 id="列表的常用方法"><a href="#列表的常用方法" class="headerlink" title="列表的常用方法"></a>列表的常用方法</h4><p>​    列表是一个可迭代对象的数据类型，可以存储包含 字符串，数字，布尔，字典 等其他的数据类型，当然也可以是自己，也就是列表嵌套列表的结构。列表也是可以通过切片操作来获取元素的，列表的元素和字符串一样，下标索引都是从 0 开始依次往后 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">append()                   <span class="comment"># 在列表的最后追加指定元素</span></span><br><span class="line">insert(index,item)         <span class="comment"># 在列表中指定的索引为 index 的位置，插入 item</span></span><br><span class="line">extend(iter)               <span class="comment"># 在原列表的最后追加可迭代对象 iter 的每一个元素，效果和 '+' 一样 </span></span><br><span class="line">pop(index)                 <span class="comment"># index 默认是 -1，即默认删除列表中最后的一个元素，并将该元素返回</span></span><br><span class="line">remove(item)               <span class="comment"># 从列表中删除指定的元素</span></span><br><span class="line">clear()                    <span class="comment"># 清空当前列表的所有元素</span></span><br><span class="line">copy()                     <span class="comment"># 拷贝当前列表</span></span><br><span class="line">count(item)                <span class="comment"># 统计列表中有指定元素的总个数</span></span><br><span class="line">index(item,start,end)      <span class="comment"># 从列表中匹配找到指定元素并返回其下标索引位，可以指定开始和结束的位置来进行指定范围的匹配</span></span><br><span class="line">sort()                     <span class="comment"># 对原列表排序，默认是升序，参数 reverse 设为 True 表示降序</span></span><br><span class="line">reverse()                  <span class="comment"># 翻转原列表</span></span><br><span class="line">len(list)                      <span class="comment"># 返回列表长度</span></span><br></pre></td></tr></table></figure></div><h4 id="元组常用方法"><a href="#元组常用方法" class="headerlink" title="元组常用方法"></a>元组常用方法</h4><p>​    简单来说元组是一个可读不可改的列表，不可改也就说明元组是可哈希的，并且列表能存储的类型，元组也可以存储，所以元组的内部的元素可是不可哈希的，同时元组一样可以通过索引来执行切片获取元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count(item)                <span class="comment"># 统计元组中指定元素的出现次数</span></span><br><span class="line">index(item,start,end)      <span class="comment"># 获取指定元素在元组的下标位置，同样可以设置一个范围</span></span><br></pre></td></tr></table></figure></div><h4 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h4><p>​    字典是以 key-value 的形式存储数据，是不可哈希的，但是字典对于 key 的要求是必须可哈希</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict[key]           <span class="comment"># 返回对应 key 的value，如果 key 不存在则抛出 KeyError 的异常</span></span><br><span class="line">dict[key]=value     <span class="comment"># 通过赋值可以更改 key 对应的值，如果 key 在字典中不存在，则会在字典中加入这对 key-value</span></span><br><span class="line"><span class="keyword">del</span> dict[key]       <span class="comment"># 删除字典中的 key 和对应的 value</span></span><br><span class="line">dict.clear()        <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> dict            <span class="comment"># 删除整个字典</span></span><br><span class="line">dict.copy()         <span class="comment"># 拷贝当前字典</span></span><br><span class="line">get(key, value)     <span class="comment"># get 方法获取 key 对应的值，但是 key 如果不存在不会抛出异常，value 参数用于指定如果 key 获取不到值，就将这个参数的值作为默认值</span></span><br><span class="line">pop(key，value)     <span class="comment"># pop 方法用于删除 key，会返回 key 对应的值，如果 key 不存在会抛出异常 KeyError，设置 value 参数的值，可以作为异常时返回的值</span></span><br><span class="line">popitem()           <span class="comment"># 默认刷出字典中最后一对 key-value</span></span><br><span class="line">keys()              <span class="comment"># 返回一个 dict_keys 的列表，包含该字典中所有的 key</span></span><br><span class="line">values()            <span class="comment"># 返回一个 dict_values 列表，包含所有的值</span></span><br><span class="line">items()             <span class="comment"># 返回一个 dict_items 列表，其中每一个元素是 (key, value) 的元组</span></span><br><span class="line">update(&#123;key:value&#125;)   <span class="comment"># 将所给的字典参数的键值更新到当前的字典中，如果 key 存在就替换 value</span></span><br><span class="line"></span><br><span class="line">fromkeys(sqe,value)   <span class="comment"># 从可迭代的参数 sqe 中将每一个元素作为字典的 key，不设参数 value 时，默认字典会给每个 key 的值赋为 None，设置 value 时，则所有键的值都是这个 value</span></span><br><span class="line">has_key(key)        <span class="comment"># 判断指定的 key 是否存在于当前字典</span></span><br><span class="line">setdefault(key,default)    <span class="comment"># 在字典中添加键值，如果字典中存在 key 则不会改动，不存在则加入这个键值</span></span><br></pre></td></tr></table></figure></div><h4 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h4><p>​    集合是一个无序且数据不能重复的序列，所以可以用来进行去重操作，与字典类似但是没有 value，集合中存储的都是 key，且 key 一样都要是可哈希的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">add()               <span class="comment"># 添加一个元素，如果元素存在就不添加，参数不能是 list，dict，tuple</span></span><br><span class="line">update()            <span class="comment"># 可以添加多个元素，参数类型可以是 list，dict，tuple，字典的就直接将 key 加入</span></span><br><span class="line">remove(ele)         <span class="comment"># 移除集合中的指定的元素，如果元素不存会抛出 KeyError 异常</span></span><br><span class="line">discard(ele)        <span class="comment"># 同上，但是不会抛出异常</span></span><br><span class="line">pop()               <span class="comment"># 如果集合是纯数字类型元素，那么 pop 方法会将集合变为有序，然后删除第一个元素；如果集合是有字符串类型的元素，pop 方法会将其无序化，然后随机删除一个元素</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">print(a)            <span class="comment"># &#123;1, 2, 'a', 6, 'c'&#125;</span></span><br><span class="line">print(a.pop())      <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">b = set(<span class="string">'asdfg'</span>)</span><br><span class="line">print(b)            <span class="comment"># &#123;'a', 'd', 'f', 's', 'g'&#125;</span></span><br><span class="line">print(b.pop())      <span class="comment"># a</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="number">9</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(a)            <span class="comment"># &#123;1, 2, 4, 5, 6, 8, 9&#125;</span></span><br><span class="line">print(a.pop())      <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">x <span class="keyword">in</span> set            <span class="comment"># 判断元素 x 是否在集合 set 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合的运算</span></span><br><span class="line">|                   <span class="comment"># 并集（例: print(pythons.union(linuxs))）</span></span><br><span class="line">&amp;                   <span class="comment"># 交集（例: print(pythons.intersection(linuxs))）</span></span><br><span class="line">-                   <span class="comment"># 差集（例: print(pythons.difference(linuxs))）</span></span><br><span class="line">^                   <span class="comment"># 对称差集（例: print(pythons.symmetric_difference(linuxs))）</span></span><br><span class="line">a == b              <span class="comment"># 判断集合 a 和 b 是否一致</span></span><br><span class="line">a &gt; b               <span class="comment"># 判断集合 a 是否包含集合 b 的所有元素，同理还有符号 '&lt;'</span></span><br><span class="line">a &gt;= b              <span class="comment"># 判断集合 a 是否包含所有集合 b 的元素或和集合 b 一致，同理还有符号 '&lt;='</span></span><br><span class="line">a.issuperset(b)     <span class="comment"># 判断集合 a 是否是集合 b 的父集，即包含集合 b 的元素</span></span><br><span class="line">a.issuberset(b)     <span class="comment"># 同上，判断 a 是否是 b 的子集</span></span><br></pre></td></tr></table></figure></div><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if…else-判断"><a href="#if…else-判断" class="headerlink" title="if…else 判断"></a>if…else 判断</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:           <span class="comment"># if 判断 condition 为 T 执行 ①</span></span><br><span class="line">①……</span><br><span class="line"><span class="keyword">elif</span> condition:         <span class="comment"># if 判断为 F 进入 elif 判断 condition 为 T 执行②</span></span><br><span class="line">②……</span><br><span class="line"><span class="keyword">else</span>:                   <span class="comment"># 上面判断都不通过执行 else 的 ③</span></span><br><span class="line">③……</span><br><span class="line"></span><br><span class="line">a = <span class="number">3000</span></span><br><span class="line">b = <span class="number">300</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    print(<span class="string">'a&gt;b'</span>)</span><br><span class="line"><span class="keyword">elif</span> a &lt; b:</span><br><span class="line">    print(<span class="string">'a&lt;b'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'a!=b or a=b'</span>)</span><br><span class="line"><span class="comment"># a&gt;b</span></span><br></pre></td></tr></table></figure></div><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>​    语法： <code>for i in iter:</code> ，从可迭代对象中每一次遍历时，依次向后出去元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>​    语法： <code>while condition:</code> ，根据条件 condition 判断是否为 True，为 True 则执行内部代码块。但是 <code>while True:</code> 代表的是无限循环，就是死循环，所以循环体内部需要去修改 condition 来退出循环</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">condition = <span class="literal">True</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">print(i)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">condition = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><p>​     while 的语法中是有判断的， 所以也可以使用 else </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">11</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'over'</span>)    <span class="comment"># else 的内部代码只有在循环条件不满足并且循环没有被 break 退出才会执行</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure></div><h4 id="退出循环"><a href="#退出循环" class="headerlink" title="退出循环"></a>退出循环</h4><p>​    上面里的例子使用了 break 来退出循环语句，来执行后续的代码；还有另一种就是 continue ，与 break 不同的是， continue 的作用是退出当前的循环，进入下一次的循环</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i)                   <span class="comment"># 0 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)                   <span class="comment"># 0 1 2 3 5，当 i = 4 时，continue 跳到下一次循环开始，i = 5</span></span><br></pre></td></tr></table></figure></div><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>​    有两种方式，一种使用 open() 正常打开文件进行处理，但是最后需要手动将文件关闭，避免一直占用系统资源；另一种常用的方式是使用 with 创建上下文管理器，这种方式在处理完成后，无需手动去关闭，当文件没有被使用的情况下，上下文管理器会自动关闭掉打开的文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'11.txt'</span>, <span class="string">'r'</span>)      </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:       <span class="comment"># 如果只是对文件只读操作，需要加上异常捕获</span></span><br><span class="line">    print(<span class="string">'文件不存在'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'12.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><p>​    打开文件时，需要给予读写模式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#39;r&#39;:  默认的模式，表示读取文件，如果文件不存在会抛出异常</span><br><span class="line">&#39;w&#39;:  表示对文件进行写入，如果文件不存在则会创建文件，如果文件存在则会进行覆盖</span><br><span class="line">&#39;a&#39;:  同上，但是不同是的，这种模式表示追加写入，所以如果文件存在，内容是追加写入，而不是覆盖</span><br><span class="line">&#39;x&#39;:  创建文件，如果文件存在则会抛出文件存在的异常 FileExistsError</span><br><span class="line"></span><br><span class="line"># 下面这两个用于和上面的配合</span><br><span class="line">&#39;b&#39;: &#39;rb&#39;,&#39;wb&#39;,&#39;ab&#39;，在原本含义功能不变的原则下，&#39;b&#39;用来表示对二进制的文件进行处理</span><br><span class="line">&#39;+&#39;: 配合这个符号，则表示同时拥有读与写，例如 &#39;r+&#39;,&#39;w+&#39;,&#39;a+&#39;,&#39;rb+&#39;,&#39;wb+&#39;,&#39;ab+&#39;</span><br></pre></td></tr></table></figure></div><p>​    同时还有一个注意点就是，读的模式下，文件指针全部在文件的开头，追加的模式下，文件的指针会在文本的末尾</p><h4 id="内容读取"><a href="#内容读取" class="headerlink" title="内容读取"></a>内容读取</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read(size)           <span class="comment"># 读取指定 size 字节长度的内容</span></span><br><span class="line">readline()           <span class="comment"># 只读取一行的内容，最后包括换行符 \n</span></span><br><span class="line">readlines()          <span class="comment"># 读取所有的内容，通过换行符将每一行作为一个元素保存在列表返回</span></span><br></pre></td></tr></table></figure></div><h4 id="写入内容"><a href="#写入内容" class="headerlink" title="写入内容"></a>写入内容</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write(p_str)                <span class="comment"># 将字符串写入到文件中，会返回写入的字符长度</span></span><br><span class="line">write(sequence_of_strings)  <span class="comment"># 将一个字符串的序列写入文件，等同于对每个字符串使用 write 方法写入</span></span><br></pre></td></tr></table></figure></div><h3 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3><p>​    上面的文件处理就使用了异常捕获来对抛出的异常进行处理，使得程序可以正常执行，而不是被异常阻断</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完整的异常捕获逻辑，通常使用 try... except... 就能够满足异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 可能出现错误的代码块</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:     <span class="comment"># 万能的异常捕获处理，只要抛出异常都会被其捕获</span></span><br><span class="line"><span class="comment"># except 可以根据可能出现的错误类型进行添加，当出现 try 中的代码块出现异常则执行对应错误类型的except的代码块</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># else 的代码只有在 try 中代码执行没有问题的情况下执行，其作用就是防止一些意想不到的问题，并且 except 又没有捕获到</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"><span class="comment"># finally 的语句是指无论 try 是否出现错误都会执行的代码块</span></span><br></pre></td></tr></table></figure></div><h4 id="常见的异常类型"><a href="#常见的异常类型" class="headerlink" title="常见的异常类型"></a>常见的异常类型</h4><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>NameError</td><td>尝试访问一个没有声明的变量等</td></tr><tr><td>SyntaxError</td><td>语法出现错误，可能就是单词错误或是符号问题</td></tr><tr><td>IndexError</td><td>下标索引超出序列的范围，循环遍历时或是按照下标取元素会出现这个问题</td></tr><tr><td>KeyError</td><td>尝试请求一个不存在于字典的主键</td></tr><tr><td>AttributeError</td><td>尝试访问一个未知的对象属性</td></tr><tr><td>ValueError</td><td>传递的参数不正确，传递过多或过少的参数等</td></tr><tr><td>TypeError</td><td>传递的参数类型不被支持进行操作等</td></tr><tr><td>ZeroDivisionError</td><td>当除数为 0 的错误</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h4 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h4><p>​    上面使用过 “万能的异常处理”，即   <code>except Exception as e</code> ，但是这样的处理如果被记录到日志中，却不好排查具体的错误原因，所以通常情况下还是去使用规定的异常名去独自处理各自异常捕获。但是有时候程序可能并不会抛出所感知到的异常，因此可以手动地抛出异常去进行捕获，即使用 ‘raise’ 语法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">'错啦错啦'</span>)</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)      <span class="comment"># 错啦错啦</span></span><br></pre></td></tr></table></figure></div><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>​    通过上面表里列出的异常和描述，不难看出其实这些异常可能对应的情况有多种，如果想要精确的捕获一种情况的异常错误，可以使用自定义异常，但前提自定义异常的类需要继承 BaseException</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myException</span><span class="params">(BaseException)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">self.msg = msg</span><br><span class="line"><span class="comment"># def __str__(self):   可以不用写这个方法，因为那个BaseException父类里面已经实现了</span></span><br><span class="line"><span class="comment">#     return self.msg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">raise</span> myException(<span class="string">'错啦错啦'</span>)</span><br><span class="line"><span class="keyword">except</span> myException <span class="keyword">as</span> e:</span><br><span class="line">print(e)       <span class="comment"># 错啦错啦</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础整理</title>
      <link href="/1520610863/"/>
      <url>/1520610863/</url>
      
        <content type="html"><![CDATA[<h2 id="编程知识简单整理"><a href="#编程知识简单整理" class="headerlink" title="编程知识简单整理"></a>编程知识简单整理</h2><h3 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h3><p>这个世界上有非常多的编程语言，他们大部分都可以胜任一个或多个领域的代码编程，但是各自之间的编程方式或执行方式都有些不同。从编程角度上分为三种：机器语言，汇编语言，高级语言</p><p><strong>机器语言：</strong>简单来说就是通过使用计算机底层的二进制码，也就是通过 0 和 1 编写机器指令来执行程序。通常来说，这个要求是非常大的，即不好记忆，也不方便对其进行阅读，但是执行非常快</p><p><strong>汇编语言：</strong>类似与机器语言，但是对其进行了优化，通过将英文缩写来代替代码指令，称为 “助记符”，但是依旧通过编写指令来执行</p><p><strong>高级语言：</strong>进一步在汇编的基础上，将相关指令合成单条指令，形成了对指令的封装，让代码编写更简单，偏向人类思维方式，也更方便代码阅读</p><p>从执行上来说：机器语言使用二进制码，因此可以被CPU直接解读执行；汇编语言和高级语言的编写会产生一个 <strong>源程序</strong> 文件，这个文件不能被直接执行。对于汇编语言，需要汇编程序将源程序进行翻译并生成目标程序来执行。对于高级语言，又分成 <strong>解释型</strong> 或 <strong>编译型</strong> 两种程序进行翻译执行。需要知道的是，机器语言和汇编语言因为编写复杂，难以记忆和阅读，也被称为 “低级语言”</p><h3 id="解释型和编译型"><a href="#解释型和编译型" class="headerlink" title="解释型和编译型"></a>解释型和编译型</h3><p>两种类型的执行方式，其实都是需要对代码进行一个机器码的翻译过程，但是两者方式并不同</p><p><strong>编译型</strong>（c，c++ 等）</p><p>优点：编译器一般会有预编译的过程对代码进行优化，完成后运行不需要再次编译，所以编译型语言的程序执行效率高，编译后的文件可以脱离开发环境独立运行。需要知道的是，编译器的目的实现代码翻译机器码，并且会有两个步骤分别是编译和链接，链接是为了将模块的机器码和依赖库串连起来</p><p>缺点：编译之后，如果要修改代码，那么就需要重新在编译一次。并且编译会根据当前操作系统环境生成机器码，不同的操作系统间移植会有问题，跨平台性相对较差</p><p><strong>解释型</strong>（python，javascript 等）</p><p>优点：有良好的平台兼容性，在任何环境中都可以运行，但是前提需要安装解释器 (虚拟机)。因为不是整体编译后才能执行，所以相对更灵活，代码支持动态修改</p><p>缺点：由于是边解释编译，边执行，因此执行效率比较低。而且因为没有整体编译后的执行文件，所以执行上就必须依赖于解释器</p><h3 id="动态和静态"><a href="#动态和静态" class="headerlink" title="动态和静态"></a>动态和静态</h3><p>通常语言的分类中也会提到动态语言和静态语言，两者主要的区别是：在运行过程中，是否能够改变代码结构，变量是否需要声明数据类型。</p><p><strong>动态语言</strong> 可以再运行时进行函数，对象等引用，或是删除已有的函数等，能够改变自身结构；同时，动态语言在运行时就会确定数据类型，变量的类型会按照被赋的值的类型判断，例如：Python，JavaScript 等</p><p><strong>静态语言</strong> 即不支持结构上的修改，同时变量使用，需要提前声明数据类型</p><p>通常情况下解释型语言也是动态类型语言，编译型语言也是静态类型语言</p><h3 id="强类型和弱类型"><a href="#强类型和弱类型" class="headerlink" title="强类型和弱类型"></a>强类型和弱类型</h3><p><strong>强类型</strong> 语言表示一旦变量被制定了数据类型，除非进行了强制转换，否则就一直是原来的类型，并且强类型中整型不能和字符串共同处理</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a += '1'</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#3&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a += <span class="string">'1'</span></span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +=: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></table></figure></div><p><strong>弱类型</strong> 就基本忽略了数据类型，一个变量可以被赋予不同的数据类型的值，并且支持整型与字符串的处理，规则上会将整型强制转换为字符串来操作，得到结果将属于字符串类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">a += <span class="string">'1'</span></span><br><span class="line"><span class="string">"11"</span></span><br></pre></td></tr></table></figure></div><p><strong>总结：</strong></p><p><a href="https://pic2.zhimg.com/80/b0aeb7ffd1667b9162e5329154d43777_720w.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://pic2.zhimg.com/80/b0aeb7ffd1667b9162e5329154d43777_720w.jpg" class="lazyload"></a></p><p>​    图片来之知乎：<a href="https://www.zhihu.com/question/19918532" target="_blank" rel="noopener">https://www.zhihu.com/question/19918532</a> </p><h2 id="编码类型"><a href="#编码类型" class="headerlink" title="编码类型"></a>编码类型</h2><p>​    常见的有：ASCII，GBK，Unicode，UTF-8，UTF-16 等，需要知道 1 字节（B，byte）= 8 位（bit），二进制表示位就是 0000000，往上是 1KB = 1024 B，1MB = 1024 KB 等等</p><p>​    ASCII：一个英文字母使用一个字节，包含大小写英文字母，0-9， 常规的标点符号和扩展的符号等，范围是 0 - 255</p><p>​    GBK：中国制定的一套自己的编码规则，使用 2 个字节（16位）表示一个中文汉字，对于英文依旧使用 1个字节 = 1字母，还有一套中文编码 GB2312，表示国家标准第2312条</p><p>​    Unicode：也叫万国码，包含了全世界所有的字符，但是 unicode 只是一个理论上的编码方式，它有不同的编码实现</p><p>​    UTF-8：是可变长度的 unicode ，对于英文依旧使用 1个字节（8位）存储，欧洲其他文字使用 2个字节（16位），中文使用 3个字节（24位）</p><p>​    UTF-16：也是 unicode 的方式之一，但是全部将所有字符全部统一使用 16位 进行存储</p><p>​    另外，python 的发布要比 unicode 的要早，所以这也就是为什么在 python2 的版本中使用的是 ASCII 的编码方式</p><h2 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h2><p>​    python 中数据类型有 str，int，list，tuple，dict，bool，set</p><p>​    其中分为<strong>可变对象，不可哈希</strong>的是：<strong>list，dict，set</strong>；分为<strong>不可变对象，可哈希</strong>的是：<strong>str，int，tuple</strong></p><pre><code>### 不可变，可哈希</code></pre><p>​    什么是不可变，就是说不同的值需要使用不同的内存地址，例如对 python 的 str 进行操作，得到结果是使用另一个内存地址，而不是原来的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">print(id(a))    <span class="comment"># 2673291651144</span></span><br><span class="line"></span><br><span class="line">a += <span class="string">'world'</span></span><br><span class="line">print(id(a))    <span class="comment"># 2673311883696</span></span><br></pre></td></tr></table></figure></div><p>​    一个对象可哈希，那么在生存期内必须是不可变的，且这个对象内部需要一个哈希函数，和一个用来比较的方法，用来比较哈希的值。也就是说如果一个对象是可哈希的，它的内部需要有的魔法方法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) __eq__() 或者 __cmp__()</span><br><span class="line">2) __hash__()</span><br></pre></td></tr></table></figure></div><p>​    这里有一个<strong>注意点</strong>：</p><p>​    python 中一切皆为对象，并且所有的类都有一个共同的继承父类就是 object，但是 object 类中是有提到的可哈希需要的两个方法的，下面的实例中我将他们移到了最前面，同时 dir() 方法的目的是为了显示对象中所有的方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(dir(object))</span><br><span class="line">[<span class="string">'__eq__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>,  <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>]</span><br></pre></td></tr></table></figure></div><p>​    所以，当使用 dir() 查看 list 或其他可变对象时，也能看到      <code>__eq__</code> 和 <code>__hash__</code> ；并且如果自定义一个类，当调用 hash() 方法时，也可以得到一个 hash值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>, self.color)</span><br><span class="line"></span><br><span class="line">car = Car(<span class="string">'blue'</span>)</span><br><span class="line">print(hash(car))     <span class="comment"># 143713058673</span></span><br></pre></td></tr></table></figure></div><h3 id="可变，不可哈希"><a href="#可变，不可哈希" class="headerlink" title="可变，不可哈希"></a>可变，不可哈希</h3><p>​    上面说到内存地址不一致，表明这个对象是不可变的，反之如果一个对象操作后 id 不变，那就是一个可变对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(id(a))     <span class="comment"># 2241896735240</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line">print(id(a))     <span class="comment"># 2241896735240</span></span><br><span class="line">print(a)         <span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></div><p>​    由此可知，为什么 python 中的字段不能使用 可变数据类型，因为字典的查找会通过 key 找对应的值，如果 key 使用可变类型，就会导致不同的值最后依赖的是相同的 key，这显然是不对的</p>]]></content>
      
      
      <categories>
          
          <category> 编程基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/undefined/"/>
      <url>/undefined/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello~ world : )"></a>Hello~ world : )</h3><p>​    终于，我的博客问世了，可喜可贺。为什么要弄博客呢，最重要的目的其实就是为了做技术积累，和一些生活记录吧，以往总是在学习之后，只是使用 word 或 思维导图去做一些记录，但是怎么看怎么丑，而且查看起来也不是特别的方便，于是就开始了一段博客搭建之旅。</p><p>​    这一说，还有些惭愧了，自己也不是技术能人，只是会些皮毛的小角色。在搭建博客的过程中，一度一拖再拖，仅仅就是弄了框就什么也没弄了，简直 “鸽子王”。好在，这些天终于弄好了，虽然整体上来说弄得有点胡里花哨的，加载也挺慢，图片也不美，但，但是也算是有个完整的了嘛。那接下来的就是，将之前的文本记录整理整理，陆续加入了这个博客中了。</p><p>​    最后，祝愿一切都好！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行代码</span></span><br><span class="line">print(<span class="string">"hello-world :)"</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://alexham.coding.net/p/alexham/d/alexham/git/raw/master/img/h-w.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://alexham.coding.net/p/alexham/d/alexham/git/raw/master/img/h-w.gif" class="lazyload"></a> </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
